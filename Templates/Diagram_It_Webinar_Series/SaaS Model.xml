<?xml version="1.0" encoding="UTF-8"?>
<project ref="saas-model" name="SaaS Model" isSyncing="false" tags="" modelUpdated="2024-05-22 15:28:31" workflowState="New" locked="false">
  <desc/>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
    <trustZone ref="trusted-partner" uuid="531315a7-41a2-40ed-ab87-22c3a4c3c7ff" name="Trusted Partner" desc="Vetted and trusted partner" trustRating="80"/>
  </trustZones>
  <questions/>
  <assets>
    <asset type="" name="Customer Data" desc="Data that uniquely identifies customers." identifier="">
      <classification name="Personally Identifiable Information" desc="&#10;                Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity.&#10;                " confidentiality="80" integrity="80" availability="20"/>
    </asset>
    <asset type="" name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person &#13;&#10;('Data Subject') an identifiable person is one who can be identified, &#13;&#10;directly or indirectly, in particular by reference to an identification &#13;&#10;number or to one or more factors specific to his physical, physiological, &#13;&#10;mental, economic, cultural or social identity." identifier="">
      <classification name="Personally Identifiable Information" desc="&#10;                Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity.&#10;                " confidentiality="80" integrity="80" availability="20"/>
    </asset>
  </assets>
  <settings>
    <issueTrackers>
      <jira>
        <fields/>
      </jira>
    </issueTrackers>
  </settings>
  <dataflows>
    <dataflow name="End User -&gt; Browser" ref="06f4f164-3c91-4b83-bc66-2244d0eeb78a" source="7972db35-2238-40b4-882e-c29f10c50c49" target="1c6484b5-99a1-4789-abb2-ee601db6170a">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Browser -&gt; Login" ref="1f64838b-8464-445c-a912-3a53dc6f086b" source="1c6484b5-99a1-4789-abb2-ee601db6170a" target="78c07317-dd21-4159-bbe8-a0d00553ea7d">
      <assets/>
      <tags>
        <tag tag="443"/>
        <tag tag="https"/>
        <tag tag="TLS 1.2+"/>
        <tag tag="tls 1.3"/>
      </tags>
    </dataflow>
    <dataflow name="Web UI -&gt; API Endpoint" ref="347279bf-1513-4c40-b4a7-5d6a6438a5c6" source="a2fd1f24-aca3-4db3-a43e-c199b6103331" target="0daf46f3-ac76-45ca-86c2-ad0981492362">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="API Endpoint -&gt; Other database" ref="5df85c5d-453b-49ca-a523-27f1f6394f39" source="0daf46f3-ac76-45ca-86c2-ad0981492362" target="270dc232-49b6-454b-b390-1409299f5895">
      <assets>
        <asset name="Customer Data"/>
        <asset name="Personally Identifiable Information"/>
      </assets>
      <tags/>
    </dataflow>
    <dataflow name="Browser -&gt; User Registration" ref="7f1582b6-5094-4764-8294-ae3d2571eced" source="1c6484b5-99a1-4789-abb2-ee601db6170a" target="36dab866-da86-4541-b3ca-0ad936a27879">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Third Party -&gt; API Endpoint" ref="8ac04a11-edec-4f03-b5e7-31e1fc14e86e" source="3aa06737-d494-4d96-97be-54e5275f348c" target="0daf46f3-ac76-45ca-86c2-ad0981492362">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Login -&gt; Web UI" ref="8fe629d0-aac7-4e13-83ad-5c96b9e0cdcf" source="78c07317-dd21-4159-bbe8-a0d00553ea7d" target="a2fd1f24-aca3-4db3-a43e-c199b6103331">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Browser -&gt; Change Password" ref="9694b9de-a569-484e-8a34-2902833f3768" source="1c6484b5-99a1-4789-abb2-ee601db6170a" target="dbf543f6-9213-4cb3-80f3-4a0452433923">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Browser -&gt; Plugin System" ref="972e4f26-e8f0-4dab-9e0b-2dce1ec39bc2" source="1c6484b5-99a1-4789-abb2-ee601db6170a" target="3f0245f6-951a-4fe1-aec6-3a37d351a26c">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Plugin System -&gt; API Endpoint" ref="b417b483-4fb3-4c33-aae3-cdf74860484a" source="3f0245f6-951a-4fe1-aec6-3a37d351a26c" target="0daf46f3-ac76-45ca-86c2-ad0981492362">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Plugin System -&gt; Third Party" ref="b7bc3fda-4c53-4710-b9cb-c53f96334ea1" source="3f0245f6-951a-4fe1-aec6-3a37d351a26c" target="2a1838e2-40cb-4717-abcf-ac72dbd4af81">
      <assets/>
      <tags>
        <tag tag="TLS 1.1"/>
      </tags>
    </dataflow>
    <dataflow name="Browser -&gt; API Endpoint" ref="be80cec5-fdc2-41f7-83cd-2a27574486c6" source="1c6484b5-99a1-4789-abb2-ee601db6170a" target="0daf46f3-ac76-45ca-86c2-ad0981492362">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Other database -&gt; Backups" ref="c98fc55f-9d1b-4bdb-b163-d0b97b374213" source="270dc232-49b6-454b-b390-1409299f5895" target="753f4df6-68e6-40ea-9f5b-54e445b8653e">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="project-epic-id" value=""/>
  </customFields>
  <components>
    <component uuid="475399ad-9fd4-45d2-8d7b-b8db17dbd4b2" diagramComponentId="b28109f9-7b22-412f-b09f-34466e410bd6" ref="55b11764-d333-4df5-963d-9c94abe7979c" name="Administration interface" desc="" library="IR-Functional-Components" parentComponentRef="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" componentDefinitionRef="CD-ADMINISTRATION-INTERFACE" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="WEB-SRV-ADM" name="Access to management functions is not limited to web service administrators" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable
                        user identity or consumes a significant amount of resources, gives access to sensitive data or
                        sensitive business logic.
                        &lt;br /&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.987">
              <output/>
            </source>
            <references>
              <reference name="CWE-306: Missing Authentication for Critical Function" url="https://cwe.mitre.org/data/definitions/306.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CSD-ADM-OPEN" name="Access to the administration interfaces is open to untrusted parties" state="0" impact="100" issueId="" issueLink="">
          <desc>The application does not restrict access to administration interfaces to untrusted parties. 
This fact could allow an attacker to chain vulnerabilities in order to gain unauthorized access to the system. </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.986">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="WEB-SRV-ADM-AUTH" name="Restrict access to administrative functionality" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        If inadequate controls are in place, lower privileged users may be able to access higher
                        privilege or administrative functionality to subvert security within the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Restrict administration functions to designated administrators only through robust
                        access controls.&lt;/li&gt;
                        &lt;li&gt;Ensure this restriction is applied at the server-side; do not rely on 'secret' areas
                        of the application, menu hiding, or other client-side techniques to protect the functionality.&lt;/li&gt;
                        &lt;li&gt;Measures to prevent cross-site request forgery must be present on administrative
                        functions.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="8.32" supportedStandardRef="iso-27002-2022"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Try to access administration resources with a user who is not an administrator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the access is forbidden.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.889">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CSD-ADM-TRUST" name="Restrict access to administrative interfaces" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict access to administrative interfaces to trusted actors from trusted locations to reduce the application attack surface and likelihood of compromise.&lt;/p&gt; 
&lt;p&gt;Restrict administrative access to specific networks or hosts.&lt;/p&gt; 
&lt;div&gt;
  Use strong authentication for privileged access, for example a 2FA. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
          </references>
          <standards>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try to access the administrative interface from an untrusted location. For example, if you are using a Wordpress &lt;span class="caps"&gt;CMS&lt;/span&gt; you should restrict access to /wp-admin which should not be available from the internet but only from trusted networks or IP addresses.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.888">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ADMINISTER SERVICE" name="Administer service" desc="" library="CS-Default">
          <threats>
            <threat ref="CSD-ADM-IFACE" issueId="" issueLink="" name="Attackers gain access to the system through an unprotected administration interface" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Administrative interfaces grant access to sensitive operations that can typically
                                affect key security mechanisms, like modifying credentials and adding/removing user
                                accounts.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CSD-ADM-OPEN">
                  <countermeasures>
                    <countermeasure ref="CSD-ADM-TRUST" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="WEB-SRV-ADM">
                  <countermeasures>
                    <countermeasure ref="WEB-SRV-ADM-AUTH" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSD-ADM-TRUST" mitigation="50"/>
                <countermeasure ref="WEB-SRV-ADM-AUTH" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="a5cc2da8-8e3f-41b0-9fda-2a91d8fa61bc" diagramComponentId="d51757cd-3afa-4912-934e-0b9a894a452a" ref="0daf46f3-ac76-45ca-86c2-ad0981492362" name="API Endpoint" desc="" library="IR-Dataflows" parentComponentRef="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" componentDefinitionRef="CD-API-ENDPOINT" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Personally Identifiable Information" accessType="40"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:49:41.749">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Applications protecting sensitive or otherwise restricted resources must ensure that only appropriate and authorized users can access the application data. It is important that an application prevent unauthorized users gaining inappropriate access to each other's data. Although user A and user B may both be trusted to access data within the application, they may be only authorized to access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be able to access user B's personal data by manipulating a request (typical examples are the manipulation of an ID value or other object reference sent in the URL or body of an HTTP request).&lt;/p&gt;&lt;p&gt;It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames. The application must validate each request for protected data against the proven identity of the user. Before providing access to restricted resources the application must:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure the user has undergone appropriate authentication (identification and verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this with a password, token, or other verification. Typically this is done by checking the validity of the session token issued after login.&lt;/li&gt;&lt;li&gt;Confirm the user is authorized to access the data or resource they are requesting. E.g. their confirmed identify is checked against a server-side access control matrix to determine whether they may access the requested resource.&lt;/li&gt;&lt;li&gt;Access controls should be granular and make it possible to issue to individual resources to individual users or roles.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;URL and asset based access control is provided by most web-frameworks, and it is preferable to use an established and proven framework.&lt;/p&gt;&lt;p&gt;Object-level authorization checks should be considered in every function that accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor not using an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these tests.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA CM-07 Least Functionality" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/158-08_02_CM-07"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="5.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.18" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.2" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.3" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Using two different browsers configured with an intercepting proxy:&lt;/li&gt;&lt;li&gt;Login as user A in browser A.&lt;/li&gt;&lt;li&gt;Login as user B in browser B.&lt;/li&gt;&lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;ol&gt;&lt;li&gt;Perform the operation as user A and view their sensitive data.&lt;/li&gt;&lt;li&gt;Obtain the session ID of user B.&lt;/li&gt;&lt;li&gt;Configure the proxy to intercept.&lt;/li&gt;&lt;li&gt;Perform the operation as user A again, but this time intercept all the requests and replace user A's session ID with that of user B.&lt;/li&gt;&lt;li&gt;Ensure that user A's sensitive data is &lt;strong&gt;not &lt;/strong&gt;visible.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To ensure object-level authorization checks are in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="41" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="41" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.335">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-MINIMIZE-CLIENT-PROCESSING" name="Minimize the information that each client receives from the server side to accomplish its intended action" issueId="" issueLink="" platform="" cost="0" risk="59" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Servers are often designed to send more data to the client than is really required, so it's necessary to send the minimum data from the server to the client. It's an easy way to send all information from server to client and then filter in the client's own, but this behaviour can lead to further data leak, in case that an attacker obtains this information, for example by intercepting requests or accessing the browser, so this could increase the risk of a future attack.&lt;/p&gt;&lt;p&gt;It is a good idea to have different endpoints that return different data, according to needs.&lt;/p&gt;&lt;p&gt;An example of bad code in JSP:&lt;/p&gt;&lt;p&gt;&lt;i&gt;Social Security Number: &amp;lt;%= ssn %&amp;gt;&amp;lt;/br&amp;gt;Credit Card Number: &amp;lt;%= ccn %&amp;gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;This is a bad code, because it displays a user's credit card and social security numbers, even though they aren't absolutely necessary.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="CWE-213: Exposure of Sensitive Information Due to Incompatible Policies" url="https://cwe.mitre.org/data/definitions/213.html"/>
          </references>
          <standards>
            <standard ref="API3:2023-Broken Object Property Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Use a proxy to pass browser requests through it and check the responses to see what data the server is sending. Can you get unnecessary data?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Proxy can be replaced using DevTools from your browser.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="67" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>
                        &lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                         &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                         &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                         &lt;ul&gt;
                          &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt;
                         &lt;/ul&gt;
                        &lt;/ul&gt;
                    </desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API3:2023-Broken Object Property Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.331">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="41" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Dataflows" source="DATAFLOW_RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:49:41.651">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:57.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-137-INJECTION" issueId="" issueLink="" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="DATA-VAL" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-180-BROKEN-ACCESS-CONTROL" issueId="" issueLink="" name="An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the application" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An Access Control functionality often spans many areas of software depending on the complexity of the access control system. For example, managing access control metadata or building caching for scalability purposes are often additional components in an access control system that need to be built or managed. Vulnerabilities appear when a user is able to successfully request access to something they usually shouldn't have access to. Oftentimes this is found when the authorization is not implemented properly. A typical example would be a certain endpoint on a website that throws a 403 forbidden error which is then bypassed by adding an X-Forwarded-For: "127.0.0.1" header.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1574.010" url="https://attack.mitre.org/techniques/T1574/010"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-285" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="no-security-procedures-monitoring" issueId="" issueLink="" name="Attackers gain access to the system and are not detected" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Attackers gain access to the systems and are not detected. Therefore, they can make changes to the systems and remain undetected. Data integrity is destroyed.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1562.001" url="https://attack.mitre.org/techniques/T1562/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.002" url="https://attack.mitre.org/techniques/T1562/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.003" url="https://attack.mitre.org/techniques/T1562/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.004" url="https://attack.mitre.org/techniques/T1562/004"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.006" url="https://attack.mitre.org/techniques/T1562/006"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.007" url="https://attack.mitre.org/techniques/T1562/007"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.008" url="https://attack.mitre.org/techniques/T1562/008"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.009" url="https://attack.mitre.org/techniques/T1562/009"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.010" url="https://attack.mitre.org/techniques/T1562/010"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="security-logging" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-130" issueId="" issueLink="" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1499.003" url="https://attack.mitre.org/techniques/T1499/003"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="network-rate-limit" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-157-DATA-DISCLOSURE" issueId="" issueLink="" name="An attacker can inspect the HTTP responses using a proxy to access to sensitive information that is not directly visible in the client application" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;APIs retrieve necessary data from back end systems when client applications make an API call. However, most of the backend systems were not designed to handover the exact data that the client requested. Rather, the API serves more data than what is needed by the client and then a filtering mechanism is used in the client app code to mask or discard unwanted data. If an attacker launches the underlying API and examines the response patterns, they are able to access the redundant data which could contain sensitive information.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Besides returning excessive data records in response to a client request, an API may also expose certain references to the platform technologies used by the application. This allows hackers to look for vulnerabilities on such software and attack the system using that information.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-MINIMIZE-CLIENT-PROCESSING" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="IR-Dataflows">
          <threats>
            <threat ref="CAPEC-66" issueId="" issueLink="" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="DATAFLOW_RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Dataflows" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="2cb871e2-3dd6-4c38-bdf6-9249be5fea6e" diagramComponentId="48c4fd31-a203-4a7f-87c7-597519de04f5" ref="753f4df6-68e6-40ea-9f5b-54e445b8653e" name="Backups" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="other" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.603">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.977">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:43:00.326">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.979">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.980">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Use an account with only the minimum set of permissions required to access the data store. The account should not be able to perform operations that are not explicitly required by the component that performs these operations. For example, if a web application needs to read data from certain tables and insert and update data from others, then a database account with only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt; 
 &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt; 
 &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary permissions are assigned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.513">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public domain, they get included in automated exploitation suites like Metasploit and a wider less skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales. &amp;nbsp;There is often a small window between the release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting services to ensure the project team is promptly aware of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.823">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="59" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest (e.g. databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.822">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.821">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of the service and its attack surface; and the likelihood of a malicious actor gaining access to the system.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Apply network layer security controls so that only the necessary and expected IP addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that the network access to the service is only allowed for the components which need it.&lt;/li&gt; 
 &lt;li&gt;There should be a firewall protecting the network segment in which the service is installed.&lt;/li&gt; 
 &lt;li&gt;Check that the firewall restricts all access and only permits the minimum connections required using the principal of least privilege.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:59.823">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Dataflows" source="DATAFLOW_RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:43:00.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" issueId="" issueLink="" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="unauthorized-user-gains-access" issueId="" issueLink="" name="Unauthorized user gains access" state="Expose" source="MANUAL" edited="false" owner="jrabe@iriusrisk.com" library="" editable="true">
              <desc/>
              <riskRating confidentiality="90" integrity="90" availability="90" easeOfExploitation="90"/>
              <references/>
              <weaknesses/>
              <countermeasures/>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-115" issueId="" issueLink="" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" issueId="" issueLink="" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="VULN-SERVICE" issueId="" issueLink="" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="IR-Dataflows">
          <threats>
            <threat ref="CAPEC-66" issueId="" issueLink="" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="DATAFLOW_RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Dataflows" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1e295caf-e772-4fce-a05a-2b347e36f96b" diagramComponentId="cd9d629d-7251-48f3-a413-629de819e307" ref="1c6484b5-99a1-4789-abb2-ee601db6170a" name="Browser" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="CD-BROWSER" generatedByRules="false" persistent="false">
      <tags/>
      <questions>
        <question ref="encryptedTransport" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read the code or reverse engineer it if it is compiled in any form. If the client side code includes secret keys, sensitive business logic (like client authentication) or proprietary information, all of this is directly exposed to the user, allowing them to get the sensitive information or study the business logic with the aim of bypassing it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of this vulnerability are:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt; 
   &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client calls without a proxy.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.050">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-942-CORS_PERMISSIVE" name="CORS Access-Control-Allow-Origin policy is set to *" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses a cross-domain policy file that includes domains that should not be trusted.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A cross-domain policy file ("crossdomain.xml" in Flash and "clientaccesspolicy.xml" in Silverlight) defines a whitelist of domains to which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains. An overly permissive policy file allows many of the same types of attacks seen in Cross-Site Scripting (CWE-79). Once a user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could potentially transfer private information, such as cookies, that may include session information, from the victim's machine to the attacker. The attacker could also potentially send malicious requests to a website on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. In many of these cases, the attack can be launched without the victim even being aware of it.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.282">
              <output/>
            </source>
            <references>
              <reference name="CWE-942: Overly Permissive Cross-domain Whitelist" url="https://cwe.mitre.org/data/definitions/942.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.500">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-233" name="Improper Handling of Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.281">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.501">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-525" name="Information Exposure Through Browser Caching" state="0" impact="100" issueId="" issueLink="">
          <desc>For each web page, the application should have an appropriate caching policy specifying the
                        extent to which the page and its form fields should be cached.
                        &lt;br /&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.282">
              <output/>
            </source>
            <references>
              <reference name="CWE-525: Information Exposure Through Browser Caching" url="https://cwe.mitre.org/data/definitions/525.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-922" name="Information Exposure Through Local Storage" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores sensitive information without properly limiting read or write access by
                        unauthorized actors.
                        If read access is not properly restricted, then attackers can steal the sensitive information.
                        If write access is not properly restricted, then attackers can modify and possibly delete the
                        data, causing incorrect results and possibly a denial of service.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.282">
              <output/>
            </source>
            <references>
              <reference name="CWE-922: Insecure Storage of Sensitive Information" url="https://cwe.mitre.org/data/definitions/922.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.705">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-NOSNIFF" name="Internet Explorer could allow Cross Site Scripting attacks through content sniffing" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The product does not use - or incorrectly uses - a protection mechanism providing defense against attacks on the product. This weakness covers three distinct situations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack.&lt;/li&gt;&lt;li&gt;An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.&lt;/li&gt;&lt;li&gt;An "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.501">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.174">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="WEB-CSP" name="Lack of Content Security Policy version 2 (CSPv2)" state="0" impact="100" issueId="" issueLink="">
          <desc>Content Security Policy (CSP) is a computer security standard introduced to prevent cross-site
                        scripting (XSS), click jacking and other code injection attacks resulting from execution of
                        malicious content in the trusted web page context.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.502">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-84-HTTP-ONLY" name="Lack of 'HttpOnly' flag on session cookie" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The web application improperly neutralizes user-controlled input for executable scripts disguised with URI encodings.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.502">
              <output/>
            </source>
            <references>
              <reference name="CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page" url="https://cwe.mitre.org/data/definitions/84.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.047">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM" name="No consent mechanism (conform GDPR &amp; E-privacy Regulation)" state="0" impact="100" issueId="" issueLink="">
          <desc>No consent mechanisms (or a consent mechanism that does not comply with the GDPR and E-privacy legislation consent requirements) so the organization is unable prove to data protection authorities that the processing is legitimate/legal.
          </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.282">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY" name="No export functionality" state="0" impact="100" issueId="" issueLink="">
          <desc>No exportability functionality (for users or admins) which would allow the user to (directly or indirectly via an admin) export his personal data in a clear, readable format and transport it to another data controller. </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.283">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.049">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-598" name="The application sends sensitive information using the URL query string" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application uses the GET method to process requests that contain sensitive
                        information, which can expose that information through the browser's history, Referers, web
                        logs, and other sources.
                        &lt;br /&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.282">
              <output/>
            </source>
            <references>
              <reference name="CWE-598: Information Exposure Through Query Strings in GET Request" url="https://cwe.mitre.org/data/definitions/598.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-CLICKJACK" name="The page can be included in an iframe" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection mechanism that provides sufficient
                        defense against directed attacks against the product. This weakness covers three distinct
                        situations:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A &amp;quot;missing&amp;quot; protection mechanism occurs when the application does
                        not define any mechanism against a certain class of attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;An &amp;quot;insufficient&amp;quot; protection mechanism might provide some defenses -
                        for example, against the most common attacks - but it does not protect against everything that
                        is intended.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Finally, an &amp;quot;ignored&amp;quot; mechanism occurs when a mechanism is available
                        and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.501">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.049">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
&lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.050">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="EU-GDPR-CONSENT-MECHANISM" name="Create a consent mechanism" issueId="" issueLink="" platform="" cost="0" risk="64" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement a consent mechanism which allows data subjects (persons of whom personal data is processed) to give their consent for certain processing activities. This is mainly used for cookies and secondary purposes such as direct marketing, newsletters, ...&lt;br/&gt; 
          &lt;br/&gt;The consent mechanism often consists of a check box. These check boxes are required for every single secondary purpose (not allowed to implement one consent box for all purposes). The consent boxes should: &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;be inactive by default (the data subject should active the box)&lt;/li&gt;
              &lt;li&gt;revocable (the data subject must be able to revoke the consent in a way that is as easy as it was to give consent, this can be done by implementing a platform on which the data subject can actively manage his/her consents) &lt;/li&gt;
              &lt;li&gt;Traceable (a consent database is required to track when consent was given and revoked. This must include timestamps) &lt;/li&gt;
              &lt;/ul&gt;
              &lt;br /&gt;You must involve the DPO and/or legal department to decide on the legitimation that can be used.
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
          </references>
          <standards>
            <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.6" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.7" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify appropriate user personal data consent mechanisms are in place and are not pre-granted.&lt;/li&gt;
                &lt;li&gt;Verify users can modify their data consent choices in a manner as easy as giving consent.&lt;/li&gt;
                &lt;li&gt;Verify the above above user activities have been appropriately logged.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.095">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy instructs compliant browsers on how they may interact with external sites while in the current context. This enables the server to control interactive code and content from third parties, mitigating some client-side code injection attacks. The policy allows the server to specify what connections are permitted for each type of resource.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example, the following policy tells the browser to allow connections (including websockets) to the same domain to which the page was served: *.iriusrisk.com.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and set a Content-Security-Policy with least-privileges to allow only those interactions which are explicitly required.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header is returned, and if so, that it follows the security practice of least-privilege.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For more information on &lt;i&gt;Content-Security-Policy&lt;/i&gt; policy setup, see:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.319">
              <output/>
            </source>
            <references>
              <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="not-store-sensitive-data-client-side" name="Do not store sensitive data on the client-side and remove sensitive authentication data" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Browsers and extensions provide a number of local storage options to persist data during HTTP interactions, including (but not limited to) Cookies, HTML5 local storage, session storage, IndexedDB, Flash cookies, and Silverlight isolated storage. These storage options may all be accessed by subsequent users of the browser or computer, and due to this some have experienced unauthorized and/or remote access to their contents. It is important that sensitive, private, and otherwise restricted data is handled with care on the client-side, and is not stored in insecure locations which may expose it to attack.&lt;/p&gt;&lt;p&gt;Sensitive data should not be persistently stored on the client-side due to the risk of exposure. However, during normal application operation, authenticated and other sensitive data is passed, stored in transient form, and displayed to users. It is important that any such temporary storage is purged in a timely manner and actively at the end of a user session.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Do not store sensitive data in any kind of persistent, client-side storage.&lt;/li&gt;&lt;li&gt;Review any application or browser layer caching or temporary storage to ensure it doesn't expose data.&lt;/li&gt;&lt;li&gt;Sensitive data (including any authenticated content) stored in client-side objects such as the browser DOM should be cleared and removed actively at the end of user session (e.g. using the logout function), and where possible cleared through hard termination of the browser (e.g. closing the window or tab without using the proper application function).&lt;/li&gt;&lt;li&gt;Ensure any storage used during application interaction is temporary, and automatically cleared by the browser.&lt;/li&gt;&lt;li&gt;Where possible, set expiration times on client-side data to prevent accidental or malicious storage or disclosure.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SA-08 Security Engineering Principles" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/58-08_02_SA-08"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="8.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Identify application functionality where sensitive or secret data is held by the browser. This may include credit card PAN or other data held in the viewstate or DOM whilst data is gathered from the user.&lt;/li&gt;&lt;li&gt;Ensure this data is not stored persistently (e.g. on disk, in persistent cookies, HTML5 stores, Flash or Silverlight storage etc.).&lt;/li&gt;&lt;li&gt;Review local storage in the browser Web Developer Console during and after use of the application.&lt;/li&gt;&lt;li&gt;Ensure that authentication data is removed after the session termination, to test it, use the following steps:&lt;ul&gt;&lt;li&gt;Access the application as an authenticated user.&lt;/li&gt;&lt;li&gt;Manually or programmatically browse the site and use authenticated functionality&lt;/li&gt;&lt;li&gt;In particular, identify application functionality in which sensitive or secret data is held by the browser. This may include credit card PAN or other data held in the viewstate or DOM whilst data is gathered from the user.&lt;/li&gt;&lt;li&gt;Ensure this data is not stored persistently (e.g. on disk, in persistent cookies, HTML5 stores, Flash or Silverlight storage etc.).&lt;/li&gt;&lt;li&gt;Review local storage in the browser Web Developer Console during and after use of the application. For example, review the HTML5 objects localStorage and sessionStorage for any sensitive data which is saved and not deleted after the logout&lt;/li&gt;&lt;li&gt;Alternatively, a Javascript console can be used with the command: &lt;i&gt;sessionStorage//Storage {length: 0}localStorage//Storage {length: 0}&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.095">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="51" state="Implemented" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="2.1" supportedStandardRef="swift-cscf"/>
            <standard ref="2.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.6" supportedStandardRef="swift-cscf"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.855">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-598" name="Ensure no sensitive data is sent in the URL" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed in the URL (address bar) between client and server is likely to be exposed in logs on the server, or intermediate devices (such as proxies or other network devices), or in local browser logs/history. A common mistake is, for example, to pass a SessionID value as a parameter in the URL of a get request between hosts. To mitigate the risk of exposure of sensitive data, this sensitive data should only be sent in the body of an HTTP message (for example a POST request), or in the HTTP headers (i.e. standard headers such as the Cookie values, or a custom X- header).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value.&lt;/li&gt;&lt;li&gt;Pass sensitive data only in appropriately protected fields in the body or headers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Sensitive Data Exposure" url="https://pwning.owasp-juice.shop/part2/sensitive-data-exposure.html"/>
          </references>
          <standards>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A02:2021-Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A3:2017-Sensitive Data Exposure" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy.&lt;/li&gt;
                            &lt;li&gt;Programmatically or manually visit all authenticated content and functionality
                            within the application.&lt;/li&gt;
                            &lt;li&gt;Review logs to determine if sensitive data is sent in the URL at any point. If
                            should only be sent in HTTP headers (i.e. a cookie) or as part of the body (e.g. in a POST
                            or PUT request).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.093">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="60" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.855">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="EXPORT-DELETE-FUNCTIONALITY" name="Implement a method to remove or export user data on demand" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data gathered from a user should be exportable. This does not include derived fields that were created by the organization, such as customer segmentation fields.&amp;nbsp;&lt;br&gt;&lt;br&gt;Provide or develop the means to facilitate data portability requests, such as download tools or Application Programming Interfaces (API).&amp;nbsp;&lt;br&gt;&lt;br&gt;Guarantees should be in place that personal data is transmitted in a structured, commonly used and machine-readable format, and ensure the interoperability of the data format, provided in the exercise of a data portability request.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="A Complete Guide to GDPR, CCPA and International Privacy Laws" url="https://secureprivacy.ai/complete-guide-to-international-data-privacy-laws/"/>
          </references>
          <standards>
            <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Verify users have the functionality to request personal data transfer and/or download their own data.&lt;/li&gt;
                        &lt;li&gt;Verify data is in a form acceptable to the Data Protection Practitioner.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.095">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="73" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and subject to manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application logic decisions, such as access controls, and data considered sensitive or secret, such as encryption keys. While controls may be duplicated on the client-side to improve the user experience, it is important to have these enforced on the server-side.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt; 
  &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be considered tainted, and security decisions should not be made solely on this data. For example, an insecure implementation could include a compiled application (e.g. Flash!) performing authentication on the client-side against a stored password. The decompilation of the binary (in this case flv file) or the interception and modification of controls between the client and server could expose the password or allow unauthorized access to the authenticated application content. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly where client-side controls are implemented.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.850">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="minimise-parameters-request" name="Minimize the number of parameters in a request" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP requests should contain only the necessary parameters to perform the action (such as hidden fields, Ajax variables, cookies and header values). And the response only return the required information. If unnecessary information is included in the HTTP request, the attack surface is enlarged unnecessarily.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify all requests have only the necessary parameters needed to work correctly.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.095">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-79-ENCODE" name="Perform contextual HTML encoding of all user submitted data" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk. If handled properly at the point of input, this untrusted tainted data should have been sanitized and encoded safely. The context when returning the data to the user is important, however, as this will affect what metacharacters have significance, and how they will be interpreted at the client-side. &lt;/p&gt;

 For example, if data is inserted into the &lt;span class="caps"&gt;HTML&lt;/span&gt; body then &lt;span class="caps"&gt;HTML&lt;/span&gt; Entity encoding should be performed, but if the data is inserted into a JavaScript block, then JavaScript escaping should be performed. Similarly, while JavaScript code should not be executed in the browser when returned in an application/json response, it may then be rendered in an unsafe manner. 
 - Apply contextual encoding to all tainted data when returned to the users (including secondary users if the application has multiple interfaces - e.g. an internal user viewing data entered by an external customer).
 - This should be in addition to, and in conjunction with, sanitization and encoding applied at the time of data acquisition.</desc>
          <implementations>
            <implementation platform=".NET">
              <desc>ClJlc3BvbnNlLldyaXRlKEh0dHBVdGlsaXR5Lkh0bWxFbmNvZGUoUmVxdWVzdC5Gb3JtWyJuYW1lIl0pKTs=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the areas of the application in which tainted data acquired from outside the application presented back (e.g. user input, uploaded files, third party content)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Review the encoding and sanitization applied to the data before presentation.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;If possible, pass metacharacters and other unexpected content through the application to review the efficacy of the encoding.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.319">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="excessive-permissions" name="Request only the minimum required permissions" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Security best practices dictate that the practice of least-privilege be followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission.
&lt;/div&gt;
&lt;div&gt;
  Review features and functionalities present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them along with associated OS permissions.
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that the application only requests the necessary permissions to work correctly.
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.319">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-942-CORS" name="Restrict Cross Domain Origin policy through HTTP headers" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        If an overly permissive policy is specified then an attacker may be able to execute malicious
                        code hosted on a third party site in the victim's browser under the security trust of the
                        legitimate application. To prevent this:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Set the Access-Control-Allow-Origin header to only permit explicitly required trusted
                        domains.&lt;/li&gt;
                        &lt;li&gt;This set should be as small as possible, and follow the 'least privilege' paradigm.&lt;/li&gt;
                        &lt;li&gt;Do not use untrusted or tainted user-data from untrusted domains in CORS responses
                        without proper validation and sanitization.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&amp;nbsp;&lt;i&gt;Access-Control-Allow-Origin:
                            valid_host_name&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's end-points.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite, Fiddler)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Modify the Host: header in transit&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.094">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online repositories, services, and other associated restricted content must have appropriate access controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this encryption may be asymmetric or public key, or symmetric using a shared secret. Note however that reversible encryption on the client-side and in-memory storage are still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular expression patterns within the code, configuration and other files exposed on the client and server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be triggered before the code is published (in particular for public/open source code) as once published it is likely to be archived (and any disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary or persistent storage of sensitive or secret data on the client-side, and the protections in place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.855">
              <output/>
            </source>
            <references>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:54.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="secure-attributes-of-cookies" name="Secure Cookies with their attributes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Secure and HttpOnly Attribute:&lt;/strong&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information should never be stored in cookies, as they are inherently insecure and this flag doesn't offer robust protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and so the HttpOnlyflag should be set.&lt;/p&gt;&lt;p&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SameSite Attribute: &amp;nbsp;&lt;/strong&gt;The SameSite attribute should be configured to limit exposure against cross-site request forgery attacks. There are two possibilities:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lax:&lt;/strong&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;By default SameSite is not configured, we need to configure it with one of the above types, as shown below:&lt;/p&gt;&lt;p&gt;Set-Cookie: key=value; SameSite=Strict&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Domain and Path Attributes:&lt;/strong&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt;&lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;p&gt;Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;__Host- prefix:&lt;/strong&gt; ensure that all Cookies with a name starting with __Host- are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path must be "/".&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
            <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
          </references>
          <standards>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Using a browser, open the Web Developer tools.&lt;/li&gt;&lt;li&gt;Load the Network inspection tab.&lt;/li&gt;&lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;&lt;li&gt;Check that within the HTTP response, the Set-Cookie has:&lt;ul&gt;&lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;&lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;&lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that all Cookies with a name starting with __Host- are:&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path is"/".&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.319">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-525-CACHING" name="Set Cache-Control headers on sensitive and authenticated content" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Browsers, servers, and upstream/intermediate devices may cache (temporarily store) data sent in
                        HTTP sessions for performance reasons. The protocol allows for a number of HTTP headers and
                        directives to control what data may be cached, where, and for how long. It is important to specify
                        cache-controls to prevent the exposure of sensitive data through the inappropriate caching
                        of authenticated and otherwise restricted access data, either in the users' browser or other
                        devices.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Configure the server or application to set cache-control headers on sensitive content.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The following headers are recommended:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;
                        &lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;
                        &lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;
                        &lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;
                        &lt;li&gt;Pragma: no-cache&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
          </references>
          <standards>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure appropriate cache directives are returned for all sensitive and authenticated content.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the cache controls returned as part of these responses.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze cache headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The following is an example of what should be set to prevent a disclosure of sensitive data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;&lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;&lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;&lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;&lt;li&gt;Pragma: no-cache&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T15:26:29.091">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="@cwe-693-clickjack" name="Set the HTTP security header 'frame-ancestors' from the server" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy HTTP header has a frame-ancestors directive which obsoletes the X-Frame-Options header for supporting browsers.&lt;/p&gt;&lt;p&gt;The CSP frame-ancestors directive specifies valid parents that may embed a page using &amp;lt;frame&amp;gt;, &amp;lt;iframe&amp;gt;, &amp;lt;object&amp;gt;, &amp;lt;embed&amp;gt;, or &amp;lt;applet&amp;gt;.&lt;/p&gt;&lt;p&gt;Setting this directive to 'none' is similar to X-Frame-Options: deny (which is also supported in older browsers).&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;X-Frame-Options: DENY&lt;/p&gt;&lt;p&gt;Content-Security-Policy: frame-ancestors 'none'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If necessary, you can enable framing within your application's origin by setting the headers as follows:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;X-Frame-Options: SAMEORIGIN
&lt;/p&gt;&lt;p&gt;Content-Security-Policy: frame-ancestors 'self'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;For APIs the current best practices is to allow framing by specific origins (if necessary):&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Content-Security-Policy: frame-ancestors https://website1.com https://website2.com&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: frame-ancestors allows you to specify what parent source may embed a page. This differs from frame-src, which allows you to specify where iframes in a page may be loaded from.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure the&lt;i&gt;&amp;nbsp;frame-ancestors: none/self &lt;/i&gt;header is returned as configured.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the component's endpoints.&lt;/li&gt;&lt;li&gt;Verify the following header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;ul&gt;&lt;li&gt;Browse the site through the proxy&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.317">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-693-NOSNIFF" name="Set the HTTP security header 'X-Content-Type-Options' from the server" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of browser-based attacks rely on incorrectly stating MIME types on content in an attempt to bypass server and browser controls to render malicious content to the user.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set the &lt;i&gt;X-Content-Type-Options: nosniff&lt;/i&gt;&amp;nbsp;header on any page that displays previously uploaded content to prevent some XSS and related attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&amp;nbsp;&lt;i&gt;&lt;i&gt;X-Content-Type-Options:
                            nosniff&lt;/i&gt;&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's endpoints.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.319">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.855">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and those in the trust chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.855">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in use, which have undergone extensive review and testing by the developers, as well as third-parties in the development, security, and cryptography space. Typically, these widely used implementations have a lower risk of exploitation compared with privately developed - or less known - implementations (although vulnerabilities such as Heartbleed highlight this is not universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify the veracity of the implementations, and review third party validations together with security advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If not, assurance of the security of the implementation should be sought, or the risk quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:55.855">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="sec-vuln-dev-process" issueId="" issueLink="" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-63" issueId="" issueLink="" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1189" url="https://attack.mitre.org/techniques/T1189"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" issueId="" issueLink="" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="DEP-CLIENT-TECH" issueId="" issueLink="" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to:
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;Advances in the language.&lt;/li&gt;
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt;
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-39" issueId="" issueLink="" name="Attacker gains access by manipulation of an authentication token or other sensitive data" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In circumstances in which an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) this data could potentially be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-233">
                  <countermeasures>
                    <countermeasure ref="minimise-parameters-request" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="minimise-parameters-request" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="NTW-MITM" issueId="" issueLink="" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Partly-Mitigate" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1557.001" url="https://attack.mitre.org/techniques/T1557/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1557.002" url="https://attack.mitre.org/techniques/T1557/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1557.003" url="https://attack.mitre.org/techniques/T1557/003"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                <countermeasure ref="CWE-327" mitigation="25"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CWE-942-CORS_PERMISSIVE" issueId="" issueLink="" name="Attackers could gain access to sensitive data through a too permissive CORS policy" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An overly permissive policy file may allow many types of attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Once a user has visited a malicious site, they are vulnerable to a variety of attacks. For example, the attacker could potentially transfer private information, such as cookies, that may include session information, from the victim's machine to the attacker. The attacker may be able to send malicious requests to a web site on behalf of the victim, which could be especially dangerous if the victim has administrator privileges to manage that site.&lt;/p&gt;&lt;p&gt;In many cases, these types of attack can be launched without the victim even being aware of it.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-942-CORS_PERMISSIVE">
                  <countermeasures>
                    <countermeasure ref="CWE-942-CORS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-942-CORS" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="EU-GDPR-SUBJECT-RIGTHS" issueId="" issueLink="" name="Subjects cannot exercise their rights over their personal data" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Data subject cannot exercise their rights which makes it possible for them to file a complaint at the local Data Protection Authority which might lead to administrative fines.&amp;nbsp;&lt;br&gt;&lt;br&gt;Data subject = person of whom personal data is processed&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-NOT-EXPORT-FUNCTIONALITY">
                  <countermeasures>
                    <countermeasure ref="EXPORT-DELETE-FUNCTIONALITY" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EXPORT-DELETE-FUNCTIONALITY" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-122" issueId="" issueLink="" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="excessive-permissions" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="excessive-permissions" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-63" issueId="" issueLink="" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1189" url="https://attack.mitre.org/techniques/T1189"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-693-NOSNIFF">
                  <countermeasures>
                    <countermeasure ref="CWE-693-NOSNIFF" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="CWE-79-ENCODE" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-84-HTTP-ONLY">
                  <countermeasures>
                    <countermeasure ref="secure-attributes-of-cookies" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="WEB-CSP">
                  <countermeasures>
                    <countermeasure ref="WEB-CSP" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-693-NOSNIFF" mitigation="25"/>
                <countermeasure ref="CWE-79-ENCODE" mitigation="25"/>
                <countermeasure ref="WEB-CSP" mitigation="25"/>
                <countermeasure ref="secure-attributes-of-cookies" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="TRANSACTION AUTHENTICATION" name="Transaction Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-103" issueId="" issueLink="" name="Attackers cause users to peform arbitrary clicks on the site through ClickJacking attacks" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly different system.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers actions in the transparent overlaying layer.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending on what that action is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The basic problem here is that there is a dichotomy between what the victim thinks he's clicking versus what he or she is actually clicking on.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693-CLICKJACK">
                  <countermeasures>
                    <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-204-AUTOCOMPLETE" issueId="" issueLink="" name="Attackers with access to a victim's client could read locally stored credentials" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>If the application accepts sensitive data through forms, then browsers could cache that data and play it if an attacker views the same form in the same browser. This requires the attacker to have access to the victim's browser.</desc>
              <riskRating confidentiality="75" integrity="75" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-525">
                  <countermeasures>
                    <countermeasure ref="CWE-525-CACHING" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-922">
                  <countermeasures>
                    <countermeasure ref="not-store-sensitive-data-client-side" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-525-CACHING" mitigation="50"/>
                <countermeasure ref="not-store-sensitive-data-client-side" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="EU-GDPR-ILLEGAL-PROCESSING-PERSONAL-DATA" issueId="" issueLink="" name="Illegal processing of personal data" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Processing personal data without legal grounds which makes it possible for data subjects to file a complaint at local Data Protection Authority which might lead to administrative fines.
              </desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-NO-CONSENT-MECHANISM">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-CONSENT-MECHANISM" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="WEB-QUERY-PARAM" issueId="" issueLink="" name="Sensitive data is compromised through query parameters in the URL" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Sensitive data directly inserted as a parameters in the URL string could all too easily leak that data inside logs, browser history, etc.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Additionally this information could potentially be leveraged by an attacker to gain access to the entire system or user data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-598">
                  <countermeasures>
                    <countermeasure ref="CWE-598" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-598" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="e12341bc-dacc-4f06-b1ab-1cee1ddfc027" diagramComponentId="453c780c-0aa1-46a9-94f7-d11913e11f41" ref="dbf543f6-9213-4cb3-80f3-4a0452433923" name="Change Password" desc="" library="IR-Functional-Components" parentComponentRef="62f113a0-01eb-4c82-b7f6-6c5340cec3b8" componentDefinitionRef="CD-CHANGE-PASSWORD" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="CWE-654" name="Authenticate users (multi - or two-factor - authentication [2FA])" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi - or two-factor - authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt;&lt;li&gt;This should leverage something such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
          </references>
          <standards>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check for authentication functions of the component.&lt;/li&gt;&lt;li&gt;Verify at least a combination of the following factors is used within the authentication process.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Something that you are: mainly biometric characteristics of yourself such as fingerprint, facial recognition, iris recognition, etc.)&lt;/li&gt;&lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&lt;/li&gt;&lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.467">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" name="Do not use GET requests for state changing operations" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use GET requests to retrieve resource representation/information only - and not modify it in any way. As GET requests do not change the resource's state, these are said to be safe methods.&lt;/p&gt;&lt;p&gt;Additionally, GET APIs should be idempotent. Making multiple identical requests must produce the same result every time until another API (POST or PUT) has changed the state of the resource on the server.&lt;/p&gt;&lt;p&gt;If the Request-URI refers to a data-producing process, it is the produced data that shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTTP Methods" url="https://restfulapi.net/http-methods/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate all GET controller methods and ensure that they don't modify the state of the server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.464">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including the session id, software/framework versions and
                        personal information.</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application does not output error massages or stack traces containing sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.421">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.106">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.102">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.423">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="secure-password-recovery" name="Implement Secure Password Recovery Mechanism" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It is common for an application to have a mechanism for a user to gain access to their account in the event they forget their password. A good design workflow for a password recovery feature will use multi-factor authentication elements. For example, it may ask a security question - something they know, and then send a generated token to a device - something they own.&lt;/p&gt;&lt;p&gt;To get this control in our approach, we have to abide by the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Send a Token Over a Protected Side-Channel: &lt;/strong&gt;Send a multi-factor token challenge with a randomly-generated code longer than 6 characters (containing both letters and numbers), by a secure channel, such TLS and&amp;nbsp;valid for a specific time period (no longer than 20 minutes) or until the password is successfully reset.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Allow user to change password in the existing session:&lt;/strong&gt; Display a simple HTML form with one input field for the code, one for the new password, and one to confirm the new password. Verify the correct code is provided and be sure to enforce all password complexity requirements that exist in other areas of the application. Avoid sending the username as a parameter when the form is submitted.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Notify user: &amp;nbsp;&lt;/strong&gt;Ensure the application notifies the user, when the password is changed.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Logging:&lt;/strong&gt; It is important to keep audit records when password change requests are submitted, when reset messages were sent to users and when users utilize them. It is especially important to log failed attempts to answer security questions and failed attempted use of expired tokens. This data can be used to detect abuse and malicious behavior. Data such as time, IP address, and browser information can be used to spot trends of suspicious use.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Other Considerations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Whenever a successful password reset occurs, all other sessions should be invalidated.&lt;/li&gt;&lt;li&gt;Strength of the questions used for password reset should vary based on the nature of the credentials. Administrator credentials should have a higher requirement.&lt;/li&gt;&lt;li&gt;The ideal implementation should rotate the questions asked in order to avoid automation.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Owasp CheatSheetSeries: Forgot Password" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Forgot_Password_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A.3" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check the recovery secret code is not sent in clear text to the user.&lt;/li&gt;&lt;li&gt;Check that&amp;nbsp;password hints or secret questions are not present.&lt;/li&gt;&lt;li&gt;Check that&amp;nbsp;password credential recovery does not reveal the current password in any way..&lt;/li&gt;&lt;li&gt;Check that the user is notified, when&amp;nbsp;an authentication factor is changed or replaced.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.468">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.468">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-DELETE-SESSIONS-MENU" name="Offer to destroy all active sessions when users change their password" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID must be renewed or regenerated by the web application after any privilege level change within the associated user session. The most common scenario where the session ID regeneration is mandatory is during the authentication process, as the privilege level of the user changes from the unauthenticated (or anonymous) state to the authenticated state though in some cases still not yet the authorized state.&lt;/p&gt;&lt;p&gt;Common scenarios to consider include; password changes, permission changes, or switching from a regular user role to an administrator role within the web application. For all sensitive pages of the web application, any previous session IDs must be ignored, only the current session ID must be assigned to every new request received for the protected resource, and the old or previous session ID must be destroyed.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;The most common web development frameworks provide session functions and methods to renew the session ID, such as request.getSession(true) &amp;amp; HttpSession.invalidate() (J2EE), Session.Abandon() &amp;amp; Response.Cookies.Add(new...) (ASP .NET), or session_start() &amp;amp; session_regenerate_id(true) (PHP).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.467">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-OTP-BRUTE-FORCE" name="Prevent brute force attacks" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement appropriate protection to prevent users from brute-forcing token generation and token checking with mechanisms such as rate limiting or CAPTCHA. And remember that OTP length must be at least 6 characters long and a combination of different characters (not only numbers, not only letters, ...).&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Protect Against Automated Attacks" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#protect-against-automated-attacks"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any captcha enabled and investigate if making continuous requests with an automated tool like Burp it is still accepting the request and generating or checking OTPs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.798">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-OTP-INVALID" name="Prevent old or used OTPs from being reused by invalidating them" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One-time passwords (OTP) are secrets used during operations that need added security or as part of user enrollment processes. Despite their short lifespan, only one OTP should be valid at any given time, and therefore, all previous OTPs should be invalidated whenever a new one is generated or after the OTP has expired.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forgot Password Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"/>
            <reference name="Invalidate Previous OTPs" url="https://docs.fluidattacks.com/criteria/requirements/347"/>
          </references>
          <standards>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Request an OTP and try to use it a couple of times. Verify that the OTP cannot be used twice or more.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.798">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" name="Prevent Simultaneous Logins" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It's possible that the application needs or wants to have simultaneous session, in this case, please control the number of the total active session and limit it.&lt;/p&gt;&lt;p&gt;If the application does not want to allow simultaneous session logons, it must take effective actions after each new authentication event, implicitly terminating the previously available session, or asking the user (through the old, new or both sessions) about the session that must remain active.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Open different browsers, or a "normal" tab and an "anonymous" tab, and check the following points:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Have you received some notification in some tab?&lt;/li&gt;&lt;li&gt;Was it possible to log in on the new login attempt? if the answer is yes, then has the previously open session been closed?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If the first session has been closed, it is recommended to check that it has been carried out correctly. To do this, use a proxy in the process, and forward requests prior to logout and check the response.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.467">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.468">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" name="Send a message to the user each time the system detects that the user is logging in from a new device or IP" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Aside from the IP address, there are a number of different factors that can be used to attempt to fingerprint a device. Some of these can be obtained passively by the server from the HTTP headers (particularly the "User-Agent" header), including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Operating system&lt;/li&gt;&lt;li&gt;Browser&lt;/li&gt;&lt;li&gt;Language&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using JavaScript it is possible to access far more information, such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Screen resolution&lt;/li&gt;&lt;li&gt;Installed fonts&lt;/li&gt;&lt;li&gt;Installed browser plugins&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using these various attributes, it is possible to create a fingerprint of the device. This fingerprint can then be matched against any browser attempting to login to the account, and if it doesn't match then the user can be prompted for additional authentication. Many users will have multiple devices or browsers that they use, so it is not practical to block attempts that do not match the existing fingerprints.&lt;/p&gt;&lt;p&gt;To take in mind: data submitted from client can be spoofed by an attacker.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Credential Stuffing Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use the application and try to log in from different devices. Note the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Does the notification arrive?&lt;/li&gt;&lt;li&gt;Are the user's trusted devices saved in server (DB)?&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.467">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-180-ACTIVE-SESSION" issueId="" issueLink="" name="Attackers keep their stolen sessions active even after the legitimate users have changed their passwords" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker is able to maintain their access to a victim account in the application even when the legitimate user of the account changes their password.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-DELETE-SESSIONS-MENU" mitigation="50"/>
                <countermeasure ref="security-logging" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-600-CRED-CHANGE" issueId="" issueLink="" name="An attacker uses user's credentials to get access to their account and change their password, preventing the legitimate user from logging in" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Reusing public breached credentials, an attacker is able to log in to the victim's account and update their credentials to maintain the account takeover attack and be able to use stored card data to execute fraudulent transactions.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" mitigation="25"/>
                <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" mitigation="25"/>
                <countermeasure ref="CWE-654" mitigation="25"/>
                <countermeasure ref="secure-password-recovery" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-62-CRED-CHANGE" issueId="" issueLink="" name="An attacker can force the user to change their credentials without noticing it" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If the user isn't required to re-authenticate, then it may be possible to carry out a CSRF attack against the password reset form, allowing their account to be compromised.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" mitigation="25"/>
                <countermeasure ref="cwe-352-csrf" mitigation="25"/>
                <countermeasure ref="secure-password-recovery" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-112-OTP-GENERATION-ABUSE" issueId="" issueLink="" name="An attacker can send a lot of OTP requests to increase the likelihood of matching one of the generated codes in a later brute force attack" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, in a password reset functionality based on the delivery of a code by email or SMS to the user, an attacker can send a lot of requests to it, generating a lot of valid codes with the goal of increasing the chances of matching the code in a brute force attack. The attack takes place in the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Automation of requests to the password reset functionality (new codes don't invalidate older ones).&lt;/li&gt;&lt;li&gt;Creation of a custom dictionary to try to match valid codes (e.g.: if a code has only 5 numbers, the dictionary is as follows: [00000, 00001,..., 99999]).&lt;/li&gt;&lt;li&gt;Brute force attack on the functionality to check the OTP and find a match.&lt;/li&gt;&lt;li&gt;Once the attacker knows a valid code he/she can proceed with the password change.&lt;/li&gt;&lt;/ol&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-OTP-BRUTE-FORCE" mitigation="50"/>
                <countermeasure ref="C-OTP-INVALID" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-114-CRED-CHANGE" issueId="" issueLink="" name="An attacker abuses the password change functionallity to change the password of other users without knowing their credentials" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Example 1 (password change):&lt;/p&gt;&lt;p&gt;Step 1. An attacker logs in with their account and go to the change password function.&lt;/p&gt;&lt;p&gt;Step 2. The attacker uses an HTTP proxy to intercept the request.&lt;/p&gt;&lt;p&gt;Step 3. After intercepting the request, they modify the user ID of the request and they update it to the victim user ID. If the server process sucessfully this request the attacker was able to change the password of the user ID account to one of their election.&lt;/p&gt;&lt;p&gt;Example 2 (password reset):&lt;/p&gt;&lt;p&gt;Step 1. An attacker does a password reset in their account.&lt;/p&gt;&lt;p&gt;Step 2. The attacker receives the password reset link and this includes two parameters in the URL: the user ID and the token (https://host.com/resetpassword?userid=1232&amp;amp;token=xodkdosff32eksl)&lt;/p&gt;&lt;p&gt;Step 3. The attacker copy the received URL, edit the userid parameter (victim account) and launches the request. If the server process sucessfully this request the attacker was able to reset the password of the user ID account to one of their election.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="secure-password-recovery" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-137-INJECTION" issueId="" issueLink="" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-575-ENUM-USERS" issueId="" issueLink="" name="Attackers can enumerate the existence of valid accounts in the system using error/informational messages" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If your login page has different error messages for unrecognized usernames and incorrect passwords, an attacker can write a script to submit lengthy lists of common usernames and test the response. With those results, the attacker can then infer which usernames are valid.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="security-logging" mitigation="33"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="82531838-4828-4138-bd8b-7753c9602a06" diagramComponentId="89cdd45c-b4b1-452d-95b5-3fe5b40b468c" ref="7972db35-2238-40b4-882e-c29f10c50c49" name="End User" desc="" library="" parentComponentRef="" componentDefinitionRef="end-user-new" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="a656fed6-4f1f-4471-bcb3-c894061ec864" diagramComponentId="6cbd29a5-6a61-4dcd-b874-c76352d41326" ref="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" name="Generic SaaS" desc="" library="IR-Generic-Components" parentComponentRef="" componentDefinitionRef="CD-GENERIC-SAAS" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="W-SAAS-01" name="Absence of Shared Responsibility Model" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;In the absence of a shared responsibility model, customers may assume that the provider is responsible for all aspects of security, including configuration and management of security controls. This can create vulnerabilities that can be exploited by attackers.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;For example, if a customer assumes that the provider is responsible for configuring access controls, they may not properly configure these controls themselves.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This can allow unauthorized users to access sensitive data or systems. Similarly, if a customer assumes that the provider is responsible for managing user permissions, they may not properly manage these permissions themselves. This can allow users to access data or systems that they should not have access to.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.970">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>When an actor claims to have a given identity, the software does not prove or insufficiently
                        proves that the claim is correct.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.973">
              <output/>
            </source>
            <references>
              <reference name="CWE-287: Improper Authentication" url="https://cwe.mitre.org/data/definitions/287.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100" issueId="" issueLink="">
          <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.974">
              <output/>
            </source>
            <references>
              <reference name="CWE-654: Reliance on a Single Factor in a Security Decision" url="https://cwe.mitre.org/data/definitions/654.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-SAAS-02" name="There is no incident response process in place" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Many organizations do not have an incident response process in place. This can be due to a lack of awareness, a lack of resources, or a lack of understanding of the importance of incident response. As a result, when a cybersecurity incident occurs, organizations may not have a clear plan of action to follow, which can lead to delays in incident response and further damage to their systems and data.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-657" name="Violation of Secure Design Principles" state="0" impact="100" issueId="" issueLink="">
          <desc>The product violates well-established principles for secure design. This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.974">
              <output/>
            </source>
            <references>
              <reference name="CWE-657: Violation of Secure Design Principles" url="https://cwe.mitre.org/data/definitions/657.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-654" name="Authenticate users (multi - or two-factor - authentication [2FA])" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi - or two-factor - authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt;&lt;li&gt;This should leverage something such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
          </references>
          <standards>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check for authentication functions of the component.&lt;/li&gt;&lt;li&gt;Verify at least a combination of the following factors is used within the authentication process.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Something that you are: mainly biometric characteristics of yourself such as fingerprint, facial recognition, iris recognition, etc.)&lt;/li&gt;&lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&lt;/li&gt;&lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.838">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-05" name="Conduct thorough due diligence to verify the SaaS vendor's compliance with data protection regulations and implementation of strong access control policies" issueId="" issueLink="" platform="" cost="2" risk="37" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Conducting thorough due diligence on your SaaS vendor's compliance with data protection regulations and their implementation of strong access control policies is critical to safeguarding your organization's sensitive data. Here's how you can implement this countermeasure effectively:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regulatory Compliance Assessment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Research and compile a list of data protection regulations applicable to your industry and geographical location.&lt;/li&gt;
 &lt;li&gt;Verify that the SaaS vendor complies with these regulations. Obtain legal opinions or certifications, such as GDPR compliance certifications for European data protection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Access Control Policy Review:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Request detailed documentation on the vendor's access control policies and procedures.&lt;/li&gt;
 &lt;li&gt;Evaluate the strength of their authentication mechanisms, including MFA and encryption protocols.&lt;/li&gt;
 &lt;li&gt;Ensure that access is based on the principle of least privilege (users have the minimum levels of access required to fulfill their duties).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Encryption and Storage:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Confirm that data both in transit and at rest is encrypted using strong encryption algorithms.&lt;/li&gt;
 &lt;li&gt;Understand where and how data is stored. Ensure it resides in secure data centers, adhering to industry best practices.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Incident Response and Reporting:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Request information about the vendor's incident response plan. Assess their ability to detect, respond to, and report security incidents promptly.&lt;/li&gt;
 &lt;li&gt;Ensure they have a process for notifying customers in case of a data breach.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vendor Security Audits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Perform security audits or hire third-party auditors to assess the vendor's security infrastructure.&lt;/li&gt;
 &lt;li&gt;Obtain reports detailing the results of these audits, ensuring they meet your organization's security standards.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="SaaS Security Risk and Challenges" url="https://www.isaca.org/resources/news-and-trends/industry-news/2022/saas-security-risk-and-challenges"/>
            <reference name="Using Software as a Service (SaaS) securely" url="https://www.ncsc.gov.uk/collection/cloud/using-cloud-services-securely/using-saas-securely"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Regulatory Compliance Verification:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Obtain copies of certifications and legal opinions confirming the vendor's compliance with relevant data protection regulations.&lt;/li&gt;
 &lt;li&gt;Cross-verify the provided documents with regulatory bodies to ensure their authenticity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Access Control Policy Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Request temporary access to a demo environment. Attempt to access areas that should be restricted to confirm access control effectiveness.&lt;/li&gt;
 &lt;li&gt;Verify that the vendor provides logs of user access and activities. Cross-verify these logs during testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Encryption and Storage Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Request information on the encryption algorithms used for data in transit and at rest.&lt;/li&gt;
 &lt;li&gt;Run network packet captures to ensure data transmitted between your system and the vendor's servers is encrypted.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Incident Response Simulation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Work with the vendor to simulate a security incident. Evaluate their response time, the effectiveness of their actions, and the clarity of communication during the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vendor Security Audit Review:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Review the reports from security audits, focusing on vulnerabilities found and the vendor's actions to remediate them.&lt;/li&gt;
 &lt;li&gt;Cross-verify audit findings with best practices and industry standards.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.838">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-04" name="Define and manage the roles and access privileges of individual application users and the circumstances in which users are granted (or denied) those privileges" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To ensure robust security within your SaaS environment, defining and managing roles and access privileges for individual application users is paramount. Properly implemented, this countermeasure mitigates unauthorized access, data breaches, and potential misuse of sensitive information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Role Definition:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Clearly define user roles based on job responsibilities and required access levels. Roles should be granular, ensuring users only have access to the necessary features and data.&lt;/li&gt;
 &lt;li&gt;Assign role-based access control (RBAC) to restrict users from actions and data outside their role scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Access Control Policies:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement access control policies that define who can access what resources and under what conditions.&lt;/li&gt;
 &lt;li&gt;Utilize strong authentication mechanisms, such as multi-factor authentication (MFA), to enhance user verification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regular Review and Updates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Regularly review user roles and privileges to align them with organizational changes.&lt;/li&gt;
 &lt;li&gt;Implement periodic access reviews to ensure that users have the appropriate level of access. Remove unnecessary privileges promptly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Logging and Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement logging mechanisms to track user activities. Log access attempts, permission changes, and any suspicious activities.&lt;/li&gt;
 &lt;li&gt;Use security information and event management (SIEM) tools to monitor access patterns and detect anomalies.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Role-Based Access Control (RBAC) for SaaS Platforms" url="https://cloudentity.com/developers/platform/authorization/rbac/"/>
            <reference name="Using Software as a Service (SaaS) securely" url="https://www.ncsc.gov.uk/collection/cloud/using-cloud-services-securely/using-saas-securely"/>
            <reference name="What IAM is and what it does " url="https://www.microsoft.com/en-us/security/business/security-101/what-is-identity-access-management-iam"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Role Verification:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Verify that each user is assigned a specific role.&lt;/li&gt;
 &lt;li&gt;Confirm that roles have well-defined permissions and restrictions.&lt;/li&gt;
 &lt;li&gt;Attempt actions outside the assigned role to ensure access is denied.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Access Control Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Test user access under different circumstances (e.g., from different IP addresses, devices) to ensure access control policies are enforced.&lt;/li&gt;
 &lt;li&gt;Attempt unauthorized access using invalid credentials to confirm that access is denied.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Review Process:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Verify that there is a documented process for periodic access reviews.&lt;/li&gt;
 &lt;li&gt;Confirm that access reviews are conducted as per the defined schedule.&lt;/li&gt;
 &lt;li&gt;Ensure that outdated or unused accounts are promptly revoked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Logging and Monitoring Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Check the logs for user activities, including login attempts, access requests, and permission changes.&lt;/li&gt;
 &lt;li&gt;Ensure that the SIEM system generates alerts for suspicious activities, such as multiple failed login attempts.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.838">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-07" name="Ensure SaaS data security through encryption protocols for data at rest, coupled with industry-standard vault protection mechanisms for safeguarding sensitive information" issueId="" issueLink="" platform="" cost="2" risk="37" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensuring SaaS data security through encryption protocols for data at rest and in transit, coupled with industry-standard vault protection mechanisms, is essential for safeguarding sensitive information. Encryption provides a robust defense against unauthorized access and protects data both during transmission and while stored on servers. Implementing industry-standard vault protection adds an extra layer of security, ensuring that even if an attacker gains access to the system, sensitive data remains secure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Encryption at Rest:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Utilize strong encryption algorithms (such as AES-256) to encrypt data stored on servers.&lt;/li&gt;
 &lt;li&gt;Implement encryption key management practices to securely manage encryption keys, including key generation, rotation, and storage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Data Encryption in Transit:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use SSL/TLS protocols for encrypting data during transmission over networks.&lt;/li&gt;
 &lt;li&gt;Ensure that all communication between clients and servers, as well as server-to-server communication, is encrypted.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vault Protection Mechanisms:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Employ industry-standard vault solutions, like HashiCorp Vault or AWS Key Management Service (KMS), to securely store sensitive data, encryption keys, and other credentials.&lt;/li&gt;
 &lt;li&gt;Implement access control policies within the vault, ensuring that only authorized personnel can retrieve sensitive information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regular Key Rotation and Updates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Enforce regular rotation of encryption keys to limit the potential damage caused by a compromised key.&lt;/li&gt;
 &lt;li&gt;Stay updated with the latest encryption standards and algorithms. Promptly update the encryption protocols as new, more secure methods become available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Monitoring and Alerts:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement monitoring systems to track encryption status, ensuring that encryption is consistently applied to all data at rest and in transit.&lt;/li&gt;
 &lt;li&gt;Set up alerts to notify administrators immediately if there are any deviations from the established encryption standards.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="8 Data Security Best Practices for SaaS Applications" url="https://www.polar.security/post/8-data-security-best-practices-for-saas-applications"/>
            <reference name="Using Software as a Service (SaaS) securely" url="https://www.ncsc.gov.uk/collection/cloud/using-cloud-services-securely/using-saas-securely"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Data Encryption Verification:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Verify that data stored on servers is encrypted using appropriate encryption algorithms.&lt;/li&gt;
 &lt;li&gt;Inspect database configurations to ensure that encryption options are enabled and correctly configured.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Encryption in Transit Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use network monitoring tools to inspect network traffic and confirm that all data transmitted between clients and servers is encrypted using SSL/TLS protocols.&lt;/li&gt;
 &lt;li&gt;Test server-to-server communication to ensure encryption is applied to all data exchanges.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vault Access Control Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Attempt to access the vault without proper authorization to confirm that access control policies are enforced.&lt;/li&gt;
 &lt;li&gt;Retrieve sensitive data from the vault using authorized credentials to validate its functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Key Rotation Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Verify that encryption keys are regularly rotated according to the defined schedule.&lt;/li&gt;
 &lt;li&gt;Test the system’s ability to encrypt and decrypt data using newly rotated keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Monitoring and Alerts Confirmation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Trigger specific events, such as disabling encryption or unauthorized access attempts, and verify that the monitoring system generates alerts promptly.&lt;/li&gt;
 &lt;li&gt;Review the alerting system to ensure that alerts are clear, actionable, and reach the designated personnel in real-time.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.838">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-01" name="Ensure that there is a Shared Responsibility Model in place" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;SaaS providers should clearly define the responsibilities of both parties in their service level agreements (SLAs).&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The SLAs should outline the security measures that the provider will implement and the security responsibilities of the customer. This will help to ensure that both parties understand their roles and responsibilities in securing the SaaS service.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Additionally, regular communication and collaboration between the provider and the customer can help to identify and address any security gaps or issues that arise.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-09" name="Establish seamless communication between the SaaS incident response team and the buyer's team to enhance collaborative incident management and response capabilities" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Establishing seamless communication between the SaaS incident response team and the buyer's team is crucial for enhancing collaborative incident management and response capabilities. Efficient communication channels and clear protocols ensure a coordinated response during security incidents, leading to faster resolution, minimized damage, and increased trust between the parties involved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Incident Response Communication Protocols:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Establish clear communication protocols outlining the roles, responsibilities, and contact information for both the SaaS incident response team and the buyer's team.&lt;/li&gt;
 &lt;li&gt;Define escalation paths and ensure all team members are aware of the hierarchy for reporting incidents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Secure Communication Channels:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use encrypted communication channels, such as secure messaging platforms or encrypted email, for sharing sensitive incident-related information.&lt;/li&gt;
 &lt;li&gt;Implement secure file-sharing methods to exchange logs, reports, and other incident-related documents securely.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regular Incident Response Drills:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Conduct regular incident response drills and simulations involving both the SaaS and buyer's teams.&lt;/li&gt;
 &lt;li&gt;Evaluate the effectiveness of communication channels and protocols during these drills and refine them based on the outcomes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Collaborative Incident Response Platform:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement a collaborative incident response platform where both teams can collaborate in real-time, share updates, and document incident progress.&lt;/li&gt;
 &lt;li&gt;Ensure the platform allows for joint incident analysis, allowing experts from both sides to work together seamlessly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Shared Incident Knowledge Base:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Create a shared incident knowledge base containing past incident reports, response strategies, and lessons learned.&lt;/li&gt;
 &lt;li&gt;Encourage both teams to contribute to the knowledge base, fostering a culture of continuous learning and improvement.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regular Communication and Status Updates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Schedule regular communication sessions, such as daily or hourly briefings, during active incidents to share updates on incident progress, challenges faced, and remediation efforts.&lt;/li&gt;
 &lt;li&gt;Ensure transparency in communication, sharing both successes and challenges, to foster trust and maintain a unified approach.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cloud incident response: Frameworks and best practices" url="https://www.techtarget.com/searchsecurity/tip/Cloud-incident-response-Frameworks-and-best-practices"/>
            <reference name="How to apply incident response for SaaS?" url="https://www.polymerhq.io/blog/how-to-apply-incident-response-for-saas/"/>
            <reference name="NIST - Computer Security Incident Handling Guide" url="https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-61r2.pdf"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Communication Protocol Verification:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Review the documented communication protocols to ensure they are clear, concise, and include all necessary contact information.&lt;/li&gt;
 &lt;li&gt;Conduct tabletop exercises to simulate incident scenarios and verify that team members follow the established communication protocols.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Secure Communication Channel Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Test the encrypted communication channels to ensure messages and files are transmitted securely.&lt;/li&gt;
 &lt;li&gt;Verify that sensitive information shared through these channels remains confidential and protected from unauthorized access.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Incident Response Drill Evaluation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Evaluate the effectiveness of communication channels and protocols during incident response drills.&lt;/li&gt;
 &lt;li&gt;Identify any bottlenecks or communication gaps and work on refining the protocols accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Collaborative Platform Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use the collaborative incident response platform during simulated incidents.&lt;/li&gt;
 &lt;li&gt;Verify that both teams can access the platform, collaborate in real time, and document their activities and findings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Knowledge Base Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Verify that the shared incident knowledge base is regularly updated with new incidents, response strategies, and lessons learned.&lt;/li&gt;
 &lt;li&gt;Encourage team members to use the knowledge base as a reference during incident response simulations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regular Communication Assessment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Evaluate the effectiveness of regular communication sessions by assessing the clarity of updates, the promptness of responses, and the overall level of collaboration.&lt;/li&gt;
 &lt;li&gt;Collect feedback from team members to identify areas for improvement in communication and coordination.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.838">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-06" name="Implement continuous monitoring of user privileges, logins, and SaaS application behavior to enhance security and detect any unauthorized activities" issueId="" issueLink="" platform="" cost="2" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implementing continuous monitoring of user privileges, logins, and SaaS application behavior is essential to enhance security and swiftly detect any unauthorized activities. A proactive approach to monitoring ensures real-time visibility into your SaaS environment, allowing timely responses to potential security threats.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Real-time User Privilege Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement a continuous monitoring system that tracks user roles, permissions, and activities in real time.&lt;/li&gt;
 &lt;li&gt;Utilize automated tools to analyze user behavior patterns and identify deviations from normal usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Comprehensive Login Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Monitor login attempts, including successful and failed logins, across all users.&lt;/li&gt;
 &lt;li&gt;Implement geolocation tracking to identify logins from unfamiliar or suspicious locations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Behavioral Analysis of SaaS Application Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Employ behavioral analysis algorithms to study typical user interactions with the SaaS application.&lt;/li&gt;
 &lt;li&gt;Set up alerts for anomalous activities, such as large data downloads, multiple login failures, or unusual access patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Integration with Security Information and Event Management (SIEM) Systems:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Integrate the monitoring system with SIEM tools to centralize log data and perform advanced correlation analysis.&lt;/li&gt;
 &lt;li&gt;Create custom dashboards and alerts in the SIEM system to provide real-time insights into user activities.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="FedRAMP Continuous Monitoring Strategy Guide" url="https://www.fedramp.gov/assets/resources/documents/CSP_Continuous_Monitoring_Strategy_Guide.pdf"/>
            <reference name="Using Software as a Service (SaaS) securely" url="https://www.ncsc.gov.uk/collection/cloud/using-cloud-services-securely/using-saas-securely"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;User Privilege Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Simulate privilege escalation attempts within the system and verify that the monitoring system detects and alerts administrators promptly.&lt;/li&gt;
 &lt;li&gt;Create a new user with elevated privileges and ensure the system identifies the change immediately.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Login Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Attempt unauthorized logins using incorrect credentials and verify that the monitoring system logs these attempts as security incidents.&lt;/li&gt;
 &lt;li&gt;Access the system from a different geographic location and confirm that the system flags this login as suspicious.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Behavioral Analysis Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Test the system by performing actions considered unusual, such as accessing multiple sensitive files in quick succession.&lt;/li&gt;
 &lt;li&gt;Verify that the monitoring system generates alerts for these activities and categorizes them as potential security threats.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SIEM Integration Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Intentionally trigger security events and confirm that the SIEM system receives the logs in real-time.&lt;/li&gt;
 &lt;li&gt;Review the SIEM dashboard to ensure that the events are accurately correlated, and appropriate alerts are generated.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.838">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-02" name="Integrate the SaaS application with the organization's identity provider to enable secure and seamless user authentication/authorization" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Integrating the SaaS application with the organization's identity provider (IdP) is a fundamental security measure that enables secure and seamless user authentication and authorization. By centralizing user management through the organization's IdP, businesses can enforce consistent access policies, enhance security, and streamline user provisioning and deprovisioning processes. This integration promotes a seamless user experience while ensuring robust identity and access management.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Single Sign-On (SSO) Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement industry-standard SSO protocols such as SAML (Security Assertion Markup Language) or OAuth to establish a secure connection between the SaaS application and the organization's IdP.&lt;/li&gt;
 &lt;li&gt;Configure the IdP to act as the identity provider, authenticating users and generating security tokens for secure access to the SaaS application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;User Provisioning and Deprovisioning:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement automated user provisioning and deprovisioning processes, ensuring that user accounts are created, updated, and deactivated in real-time based on changes in the organization's directory service.&lt;/li&gt;
 &lt;li&gt;Integrate with the IdP's APIs to automate user lifecycle management, reducing the risk of unauthorized access due to delayed user deprovisioning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Access Control Policies:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Leverage the capabilities of the IdP to enforce access control policies based on user roles and attributes.&lt;/li&gt;
 &lt;li&gt;Implement fine-grained authorization, ensuring that users only have access to the resources and functionalities necessary for their roles within the SaaS application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Security Logging and Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement logging mechanisms to capture authentication and authorization events, storing logs centrally for analysis and auditing.&lt;/li&gt;
 &lt;li&gt;Set up real-time monitoring alerts to detect and respond to suspicious authentication patterns or unauthorized access attempts promptly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST - General Access Control Guidance for Cloud Systems" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-210.pdf"/>
            <reference name="Secure you part of the deal: Security in Clouds and OWASP." url="https://owasp.org/www-pdf-archive/Clouds_Security_and_OWASP.pdf"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;SSO Integration Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Test SSO integration by attempting to access the SaaS application. Confirm that users are redirected to the organization's IdP for authentication and seamlessly logged into the application after successful authentication.&lt;/li&gt;
 &lt;li&gt;Verify that users are denied access if authentication fails or if they are not authorized according to the IdP's policies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;User Provisioning and Deprovisioning Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Simulate user additions, modifications, and removals in the organization's directory service. Verify that corresponding changes are reflected in the SaaS application in real-time.&lt;/li&gt;
 &lt;li&gt;Attempt to access the SaaS application with a recently deactivated user account to confirm that access is denied immediately.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Access Control Policy Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Assign different roles and permissions to test users in the organization's IdP. Verify that users can only perform actions and access resources allowed by their assigned roles within the SaaS application.&lt;/li&gt;
 &lt;li&gt;Attempt to access restricted areas of the application and confirm that access is denied based on the user's role.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Security Logging and Monitoring Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Generate authentication and authorization events deliberately, such as failed login attempts or attempts to access unauthorized resources.&lt;/li&gt;
 &lt;li&gt;Verify that the security logging system captures these events and generates alerts according to the defined monitoring rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.837">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAAS-08" name="Verify and enforce compliance with industry software security standards, buyer's vulnerability management requirements, and conduct regular penetration testing on administrative portals to ensure the security integrity of the SaaS solution" issueId="" issueLink="" platform="" cost="2" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Verifying and enforcing compliance with industry software security standards, adhering to buyer's vulnerability management requirements, and conducting regular penetration testing on administrative portals are fundamental practices to ensure the security integrity of the SaaS solution. By aligning with industry standards, addressing vulnerabilities promptly, and actively simulating real-world attacks, organizations can significantly reduce the risk of security breaches and data compromises.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compliance with Industry Standards:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Identify relevant industry software security standards such as OWASP Application Security Verification Standard (ASVS) or NIST Cybersecurity Framework.&lt;/li&gt;
 &lt;li&gt;Implement security controls and best practices outlined in these standards, ensuring the SaaS solution aligns with industry-recognized security benchmarks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Buyer's Vulnerability Management Requirements:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Establish a vulnerability management program that includes regular vulnerability assessments and timely patch management.&lt;/li&gt;
 &lt;li&gt;Address vulnerabilities promptly, following a risk-based approach to prioritize critical vulnerabilities for immediate remediation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regular Penetration Testing on Administrative Portals:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Conduct regular penetration testing, especially focusing on administrative portals, to identify potential security weaknesses and misconfigurations.&lt;/li&gt;
 &lt;li&gt;Engage reputable third-party security firms or employ certified ethical hackers to perform penetration testing exercises, simulating real-world attack scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Continuous Security Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement continuous security monitoring tools and practices to detect and respond to security incidents in real-time.&lt;/li&gt;
 &lt;li&gt;Integrate intrusion detection systems (IDS) and intrusion prevention systems (IPS) to actively monitor network traffic and detect suspicious activities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Security Training and Awareness:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Provide regular security training to developers, administrators, and support staff to enhance their awareness of security best practices.&lt;/li&gt;
 &lt;li&gt;Conduct simulated phishing exercises to educate employees about the dangers of social engineering attacks.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Minimum Security Standards for Software-as-a-Service (SaaS) and Platform-as-a-Service (PaaS)" url="https://uit.stanford.edu/guide/securitystandards/saas_paas"/>
            <reference name="SaaS Security Checklist" url="https://www.oracle.com/a/ocom/docs/oracle-saas-security-checklist.pdf"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Compliance Verification:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Review security controls and practices against the selected industry standards (e.g., OWASP ASVS) to verify compliance.&lt;/li&gt;
 &lt;li&gt;Conduct internal audits to ensure that implemented security measures align with the standards' requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vulnerability Management Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Perform vulnerability scanning on the SaaS solution to identify vulnerabilities.&lt;/li&gt;
 &lt;li&gt;Verify that vulnerabilities are prioritized based on risk severity and are patched or mitigated within the defined timeframe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Penetration Testing on Administrative Portals:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Conduct penetration testing on administrative portals to identify security vulnerabilities, such as weak authentication mechanisms or insecure direct object references.&lt;/li&gt;
 &lt;li&gt;Verify that identified vulnerabilities are remediated, and re-test to confirm the effectiveness of the fixes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Security Monitoring Validation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Generate simulated security incidents and verify that the monitoring systems detect and alert the security team in real-time.&lt;/li&gt;
 &lt;li&gt;Review incident response procedures to ensure timely and effective responses to security alerts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Security Training Evaluation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Assess the effectiveness of security training by conducting knowledge assessments among employees.&lt;/li&gt;
 &lt;li&gt;Evaluate the response rate and user behavior in simulated phishing exercises to measure awareness and preparedness levels.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:56.838">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Generic-Components">
          <threats>
            <threat ref="CAPEC-157" issueId="" issueLink="" name="An attacker monitors information transmitted between logical or physical nodes of a network" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" editable="true">
              <desc>&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="C-SAAS-07" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SAAS-07" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-122" issueId="" issueLink="" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="C-SAAS-04" mitigation="33"/>
                    <countermeasure ref="C-SAAS-05" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="C-SAAS-02" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SAAS-02" mitigation="34"/>
                <countermeasure ref="C-SAAS-04" mitigation="33"/>
                <countermeasure ref="C-SAAS-05" mitigation="33"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-151" issueId="" issueLink="" name="An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" editable="true">
              <desc>&lt;p&gt;Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an attacker may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the identity of the message, but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1036.001" url="https://attack.mitre.org/techniques/T1036/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.002" url="https://attack.mitre.org/techniques/T1036/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.003" url="https://attack.mitre.org/techniques/T1036/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.004" url="https://attack.mitre.org/techniques/T1036/004"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.005" url="https://attack.mitre.org/techniques/T1036/005"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.006" url="https://attack.mitre.org/techniques/T1036/006"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.007" url="https://attack.mitre.org/techniques/T1036/007"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-654">
                  <countermeasures>
                    <countermeasure ref="CWE-654" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-SAAS-06" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SAAS-06" mitigation="50"/>
                <countermeasure ref="CWE-654" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-242-CODE-INJECTION" issueId="" issueLink="" name="An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" editable="true">
              <desc>&lt;p&gt;An attacker exploits a vulnerability in input validation to inject malicious code into a system. This can allow the attacker to execute arbitrary commands, steal sensitive information, or take control of the targeted system. Code injection attacks can occur in a variety of contexts, such as web applications, operating systems, and mobile devices. The attack works by tricking the system into executing the injected code as if it were legitimate, often by exploiting weaknesses in programming languages or operating system features. Code injection attacks are a common and serious threat to the security of computer systems and proper input validation and sanitization techniques are essential to prevent them.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="100" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-657">
                  <countermeasures>
                    <countermeasure ref="C-SAAS-08" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SAAS-08" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="T-SAAS-01" issueId="" issueLink="" name="Lack of clarity regarding the responsibilities of the service provider" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" editable="true">
              <desc>&lt;p&gt;In some cases, customers may assume that the SaaS provider is responsible for all aspects of security, including configuration and management of security controls. However, in reality, the customer may be responsible for configuring and managing certain security controls, such as access controls and user permissions. If the customer fails to properly configure or manage these security controls, it can create vulnerabilities that can be exploited by cybercriminals.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;For example, if a customer fails to properly configure access controls, it may allow unauthorized users to access sensitive data or systems. Similarly, if a customer fails to properly manage user permissions, it may allow users to access data or systems that they should not have access to.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This threat is particularly relevant in SaaS environments, where customers may have limited visibility into the underlying infrastructure and security controls. As a result, it is important for customers to understand their security responsibilities and to ensure that they are properly configuring and managing security controls to mitigate this threat.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-SAAS-01">
                  <countermeasures>
                    <countermeasure ref="C-SAAS-01" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SAAS-01" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="T-SAAS-02" issueId="" issueLink="" name="There is no communication between the organization's incident response team and the SaaS provider" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Generic-Components" editable="true">
              <desc>&lt;p&gt;The incident response team is responsible for detecting, analyzing, and responding to cybersecurity incidents within an organization. They are the first line of defense against cyberattacks and play a crucial role in minimizing the impact of such incidents. On the other hand, SaaS providers are responsible for providing cloud computing services and cloud service models, such as SaaS, to their customers. They are also responsible for ensuring the security and integrity of their systems and data.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;However, in many cases, there is no communication between the incident response team and the SaaS provider. This can be due to a lack of awareness, a lack of established communication channels, or a lack of trust between the two parties. As a result, when a cybersecurity incident occurs, the incident response team may not have access to the necessary information or resources to effectively respond to the incident. This can lead to delays in incident response, which can result in further damage to the organization's systems and data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="W-SAAS-02">
                  <countermeasures>
                    <countermeasure ref="C-SAAS-09" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SAAS-09" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="47c59cb0-4ec6-4f66-a93b-51fa26f2b6a3" diagramComponentId="96b14877-0a7c-418f-aa0c-95e561db5308" ref="62f113a0-01eb-4c82-b7f6-6c5340cec3b8" name="Identity Management" desc="" library="CS-Default" parentComponentRef="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" componentDefinitionRef="empty-component" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="a1586fbe-3efa-42a6-9581-7439476ad572" diagramComponentId="29a3dd06-fb01-44bd-9d6b-80045030da03" ref="78c07317-dd21-4159-bbe8-a0d00553ea7d" name="Login" desc="" library="IR-Functional-Components" parentComponentRef="dbf543f6-9213-4cb3-80f3-4a0452433923" componentDefinitionRef="CD-LOGIN" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="C-SET-TIMESTAMP-ON-REQUEST" name="Attach timestamps or sequence numbers to each sent message" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To avoid replay attacks, a type of man in the middle attack, it is recommended to add a timestamp or sequence numbers in the exchanged messages, this will allow the receiver to discard messages with a duplicated sequence number or timestamp.&lt;/p&gt;&lt;p&gt;An example of sequence number in its messages is the TCP protocol with its ACK.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Transaction Authorization Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review code application.&lt;/li&gt;&lt;li&gt;Check the exchanged messages and verifies if there is a timestamp or sequence number and that no duplicates are allowed.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-654" name="Authenticate users (multi - or two-factor - authentication [2FA])" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi - or two-factor - authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt;&lt;li&gt;This should leverage something such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
          </references>
          <standards>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check for authentication functions of the component.&lt;/li&gt;&lt;li&gt;Verify at least a combination of the following factors is used within the authentication process.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Something that you are: mainly biometric characteristics of yourself such as fingerprint, facial recognition, iris recognition, etc.)&lt;/li&gt;&lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&lt;/li&gt;&lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-AUTHZ-AFTER-AUTHN" name="Authorize after you authenticate" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Authorization should be conducted as an explicit check, and as necessary even after an initial authentication has been completed. Authorization depends not only on the privileges associated with an authenticated user, but also on the context of the request. The time of the request and the location of the requesting user may both need to be taken into account.&lt;/p&gt;&lt;p&gt;Sometimes a user's authorization for a system or service needs to be revoked, for example, when an employee leaves a company. If the authorization mechanism fails to allow for such revocation, the system is vulnerable to abuse by authenticated users exercising out-of-date authorizations.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Authorize After You Authenticate" url="https://cybersecurity.ieee.org/blog/2015/11/13/authorize-after-you-authenticate/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate that no authorization process is conducted before an authentication process has previously finished.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAML-VERIFY-IDP-X509" name="Check if the X509Certificate entity is really the correct certificate for your Identity Provider" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It is necessary to ensure the identity of the supplier by verifying the certificate of the messages, to ensure that it is the correct one.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="SAML Raider - SAML2 Burp Extension" url="https://github.com/portswigger/saml-raider"/>
            <reference name="SAML Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check if it is possible to remove the signature&lt;/li&gt;&lt;li&gt;Sign the SAML Response with own certificate&lt;/li&gt;&lt;li&gt;Check the signature algorithm in use&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-524" name="Clear caches of sensitive data" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Applications storing or caching data locally are at risk of attack and compromise of that data. Local temporary storage, thumbnail images, and configuration files often contain excerpts of sensitive information that may be left on the device during or after the application is used.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure all temporary files, caches, and storage are purged after use and when the application is closed.&lt;/li&gt;&lt;li&gt;Do not allow the application to cache sensitive information outside of the OS provided secure stores.&lt;/li&gt;&lt;li&gt;Use OS controls to restrict thumbnails of the application in cases where sensitive information is displayed.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application for the use of caching.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify they are periodically emptied.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.933">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-IMPLEMENT-SSO" name="Consider using Single Sign-on (SSO)" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Single Sign-on (SSO) occurs when a user logs in to one application and is then signed in to other applications automatically, regardless of the platform, technology, or domain the user is using. The user signs in only one time, hence the name of the feature (Single Sign-on).&lt;/p&gt;&lt;p&gt;SSO provides a seamless experience for users when using your applications and services. Instead of having to remember separate sets of credentials for each application or service, users can simply log in once and access your full suite of applications.&lt;/p&gt;&lt;p&gt;Whenever users go to a domain that requires authentication, they are redirected to the authentication domain where they may be asked to log in. If the user is already logged in at the authentication domain, they can be immediately redirected to the original domain without signing in again.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Single Sign-On" url="https://auth0.com/docs/authenticate/single-sign-on"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any chance to connect to a SSO from your application&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-603" name="Deploy a robust server-side validation and authentication system" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When authentication is performed solely on the client-side, the user's credentials (e.g., username and password) are sent to the server for verification. However, an attacker can intercept and modify these credentials before they are sent to the server, allowing them to gain unauthorized access to the application.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Furthermore, client-side authentication does not provide any protection against attacks that target the server-side of the application. For example, an attacker could exploit a vulnerability in the server-side code to gain access to sensitive data or functionality without needing to authenticate at all.&lt;/p&gt;&lt;p&gt;All data on the client-side must be considered tainted. As such, decisions on authentication (or Identification and Verification - ID&amp;amp;V) must be made or validated on the server-side to prevent their subversion.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure credentials are passed securely from client to server.&lt;/li&gt;&lt;li&gt;The server should compare the credentials with those stored on the server-side (e.g. the hashed password compared against those stored for the claimed identity).&lt;/li&gt;&lt;li&gt;Implement controls to mitigate brute-force attacks; for example through rate-limiting, account lockouts, or escalating timeouts.&lt;/li&gt;&lt;li&gt;Once authenticated, a non-predictable and cryptographically secure token should be passed securely to the client-side to validate further interaction with the server.&lt;/li&gt;&lt;li&gt;Messages returned to the user during authentication, in particular when the process fails, should not reveal to the user whether the username was valid. Returning generic errors prevents an attacker enumerating valid account IDs for subsequent attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify which functions the service provides which are authenticated or performing a privileged action.&lt;/li&gt;&lt;li&gt;Try to access them without providing any type of authentication.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A clear example of what you should look for would be an API endpoint which allows a client to update a resource, you should ensure this call checks the authentication on the server side (by checking the session having validated the authentication credentials previously).&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.&lt;/p&gt;&lt;p&gt;One of the ways to enforce this is by following the deny-by-default principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny-by-default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-598" name="Ensure no sensitive data is sent in the URL" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed in the URL (address bar) between client and server is likely to be exposed in logs on the server, or intermediate devices (such as proxies or other network devices), or in local browser logs/history. A common mistake is, for example, to pass a SessionID value as a parameter in the URL of a get request between hosts. To mitigate the risk of exposure of sensitive data, this sensitive data should only be sent in the body of an HTTP message (for example a POST request), or in the HTTP headers (i.e. standard headers such as the Cookie values, or a custom X- header).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value.&lt;/li&gt;&lt;li&gt;Pass sensitive data only in appropriately protected fields in the body or headers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Sensitive Data Exposure" url="https://pwning.owasp-juice.shop/part2/sensitive-data-exposure.html"/>
          </references>
          <standards>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A02:2021-Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A3:2017-Sensitive Data Exposure" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy.&lt;/li&gt;
                            &lt;li&gt;Programmatically or manually visit all authenticated content and functionality
                            within the application.&lt;/li&gt;
                            &lt;li&gt;Review logs to determine if sensitive data is sent in the URL at any point. If
                            should only be sent in HTTP headers (i.e. a cookie) or as part of the body (e.g. in a POST
                            or PUT request).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.354">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including the session id, software/framework versions and
                        personal information.</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application does not output error massages or stack traces containing sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access control, authentication and authorization procedures should be centralized, and all roles, permissions, groups and users shall be controlled - or gain access - through this mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To ensure roles, groups and permissions are assigned properly to users, we need to have centralized access control, to grant or deny access easily and securely.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access control mechanisms are centralized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.267">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.648">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.647">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-FORCE-LOGOUT" name="Force logout if account permissions have been revoked" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Active sessions could be used by a malicious actor even after the account has been removed or blocked from the system. This could open the door to MitM attacks and session hijacking attacks while the application connects to the IdP to confirm that the session has no more rights to operate.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Man-in-the-middle Attack" url="https://owasp.org/www-community/attacks/Manipulator-in-the-middle_attack"/>
            <reference name="Session Hijacking Attack" url="https://owasp.org/www-community/attacks/Session_hijacking_attack"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check periodically the session status with the SSO/IdP and force the log off process in case the active account was blocked/deleted.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of Session Generation and Expiration which is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so they can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client.&lt;/p&gt;&lt;p&gt;Here are a few controls to consider when building or implementing session management solutions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt;&lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks such as when an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt;&lt;li&gt;The application should generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt;&lt;li&gt;The application should not treat OAuth and refresh tokens as their own session identifiers. Moreover, it should allow users to terminate trust relationships with linked applications.&lt;/li&gt;&lt;li&gt;The CSPs (Credential Service Provider) should re-authenticate the subscriber if it has not been authenticated since a given inactivity period. CSPs should inform the RP (Relying Parties) the last authentication time, to know if re-authentication is needed.&lt;/li&gt;&lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated on the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;ul&gt;&lt;li&gt;Revoke user sessions on the server-side.&lt;/li&gt;&lt;li&gt;Redirect users to the login page, or provide a login prompt.&lt;/li&gt;&lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application must force users to re-authenticate for more sensitive actions.&lt;/li&gt;&lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;ul&gt;&lt;li&gt;30 days&lt;/li&gt;&lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt;&lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check that sessions are renewed following the steps below:&lt;ul&gt;&lt;li&gt;Log in to the application.&lt;/li&gt;&lt;li&gt;Open another browser and go to the login page.&lt;/li&gt;&lt;li&gt;Log in to the application for the second time.&lt;/li&gt;&lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt;&lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt;&lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt;&lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications have not been terminated by users.&lt;/li&gt;&lt;li&gt;Check the CSPs force the RP to re-authenticate after a certain period of inactivity.&lt;/li&gt;&lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;ul&gt;&lt;li&gt;Open a browser.&lt;/li&gt;&lt;li&gt;Authenticate as a user A.&lt;/li&gt;&lt;li&gt;Get the Session ID and note it.&lt;/li&gt;&lt;li&gt;Logout of the service.&lt;/li&gt;&lt;li&gt;Set up the noted Session ID.&lt;/li&gt;&lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt;&lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which allows you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that the session expires after a certain period of inactivity following the steps below:&lt;ul&gt;&lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt;&lt;li&gt;Check 'normal' use through a browser:&lt;ul&gt;&lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt;&lt;li&gt;Authenticate as a user.&lt;/li&gt;&lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt;&lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check the control is enforced on the server side and not using code in the browser:&lt;ul&gt;&lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt;&lt;li&gt;Store and replay the request after the timeout period to see if the application responds with authenticated data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.271">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-THREAD-CONCURRENCY" name="Implement threading, concurrency and asynchronicity" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to make your application more responsive to a user and maximize the performance of your user's computer, we have different coding techniques. Not so long ago, apps got faster simply by buying a newer PC or server and then that trend has reversed. Users still want responsive UI and business owners want servers that scale with their business. The transition to mobile and cloud and an internet-connected population of &amp;gt;3B users has resulted in a new set of software patterns.&lt;/p&gt;&lt;p&gt;Using multiple threads of execution is one of the most powerful ways to keep your application responsive to the user and at the same time make use of the processor in between or even during user events.&lt;/p&gt;&lt;p&gt;We use concurrency to take advantage of the hardware, so you can parallelize your code to distribute work across multiple processors.&lt;/p&gt;&lt;p&gt;Async programming is a key technique that makes it straightforward to handle blocking I/O and concurrent operations on multiple cores.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Parallel Processing, Concurrency, and Async Programming in .NET" url="https://docs.microsoft.com/en-us/dotnet/standard/parallel-processing-and-concurrency"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for bottlenecks in the workflow of the application that may cause a denial of service attack if exploited such as a misconfigured file reader that blocks the main thread if more than one file is uploaded to the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-ACCOUNT-LOCKDOWN" name="Instead of completely locking out an account, place it in a lockdown mode with limited capabilities" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Depending on how critical the application is, accounts can be entirely locked out or just flagged to have most of their permissions removed. This is useful to ensure that the user experience remains good while at the same time protect the system of potential attacks due to an account misuse.&lt;/p&gt;&lt;p&gt;Developers should check that this lockdown mode doesn't reveal any potential information that could be relevant to an attacker as well as the actions that the user can do. Developers must provide a process to recover the account to its normal behavior.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Attempt to login several times with a wrong password&lt;/li&gt;&lt;li&gt;Login with the right password and check if the behavior is the same with and without having failed the login attempts.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-TOKEN-TIMEOUT" name="Invalidate a session after a predefined idle time has passed" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to keep the authenticated state and track the users progress, applications provide users with a session identifier or token which binds the user authentication credentials to the user HTTP traffic and the appropriate access controls enforced by the web application.&lt;/p&gt;&lt;p&gt;It is mandatory to set expiration timeouts for every session, establishing the amount of time a session will remain active. Insufficient session expiration by the web application increases the exposure of other session-based attacks, as for the attacker to be able to reuse a valid session ID and hijack the associated session.&lt;/p&gt;&lt;p&gt;The session expiration timeout values must be set accordingly with the purpose and nature of the web application, and balance security and usability. There are two automatic session expiration, iddle timeout and absolute timeout. Both values are highly dependent on how critical the web application and its data are. Common idle timeouts ranges are 2-5 minutes for high-value applications and 15-30 minutes for low risk applications. Absolute timeouts depend on how long a user usually uses the application. If the application is intended to be used by an office worker for a full day, an appropriate absolute timeout range could be between 4 and 8 hours.&lt;/p&gt;&lt;p&gt;When a session expires, the web application must take active actions to invalidate the session on both sides, client and server. The latter is the most relevant and mandatory from a security perspective.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Set session timeout to the minimal value possible depending on the context of the application.&lt;/li&gt;&lt;li&gt;Avoid "infinite" session timeout.&lt;/li&gt;&lt;li&gt;Prefer declarative definition of the session timeout in order to apply a global timeout for all application sessions.&lt;/li&gt;&lt;li&gt;Trace session creation/destruction in order to analyse the creation trend and try to detect a normal number of session creations (application profiling phase in a attack).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-OTP-BRUTE-FORCE" name="Prevent brute force attacks" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement appropriate protection to prevent users from brute-forcing token generation and token checking with mechanisms such as rate limiting or CAPTCHA. And remember that OTP length must be at least 6 characters long and a combination of different characters (not only numbers, not only letters, ...).&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Protect Against Automated Attacks" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#protect-against-automated-attacks"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any captcha enabled and investigate if making continuous requests with an automated tool like Burp it is still accepting the request and generating or checking OTPs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.504">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-OTP-INVALID" name="Prevent old or used OTPs from being reused by invalidating them" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One-time passwords (OTP) are secrets used during operations that need added security or as part of user enrollment processes. Despite their short lifespan, only one OTP should be valid at any given time, and therefore, all previous OTPs should be invalidated whenever a new one is generated or after the OTP has expired.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forgot Password Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"/>
            <reference name="Invalidate Previous OTPs" url="https://docs.fluidattacks.com/criteria/requirements/347"/>
          </references>
          <standards>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Request an OTP and try to use it a couple of times. Verify that the OTP cannot be used twice or more.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.505">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" name="Prevent Simultaneous Logins" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It's possible that the application needs or wants to have simultaneous session, in this case, please control the number of the total active session and limit it.&lt;/p&gt;&lt;p&gt;If the application does not want to allow simultaneous session logons, it must take effective actions after each new authentication event, implicitly terminating the previously available session, or asking the user (through the old, new or both sessions) about the session that must remain active.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Open different browsers, or a "normal" tab and an "anonymous" tab, and check the following points:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Have you received some notification in some tab?&lt;/li&gt;&lt;li&gt;Was it possible to log in on the new login attempt? if the answer is yes, then has the previously open session been closed?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If the first session has been closed, it is recommended to check that it has been carried out correctly. To do this, use a proxy in the process, and forward requests prior to logout and check the response.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SESSION-ID-ON-PARAMETER" name="Prevent the attacker from making the user use his session by accepting session IDs only from cookies, not from GET or POST parameters" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The preferred session ID exchange mechanism should allow defining advanced token properties, such as the token expiration date and time, or granular usage constraints. This is one of the reasons why cookies (RFCs 2109 &amp;amp; 2965 &amp;amp; 6265) are one of the most extensively used session ID exchange mechanisms, offering advanced capabilities not available in other methods.&lt;/p&gt;&lt;p&gt;The usage of specific session ID exchange mechanisms, such as those where the ID is included in the URL, might disclose the session ID (in web links and logs, web browser history and bookmarks, the Referer header or search engines), as well as facilitate other attacks, such as the manipulation of the ID or session fixation attacks.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review the code and check where the session ID is set.&lt;/li&gt;&lt;li&gt;Functional test, review the traffic (requests and responses), and verify thtat the session ID only appears in the cookie.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="require-use-strong-passwords" name="Require the use of strong passwords" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords used either as a sole verification credentials, or as part of a multi-factor authentication, are a key aspect of application security, and strong password selection should be encouraged and enforced. The application should allow flexibility in user password selection, and enforce minimum criteria for password quality. This should include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimum password length requirements, to mitigate brute-force and dictionary attacks.&lt;/li&gt; 
 &lt;li&gt;Encourage use of pass-phrases using multiple words, achieving longer passwords more resistant to attack.&lt;/li&gt; 
 &lt;li&gt;Enforce use of mixed case, numeric and/or special characters to increase complexity.&lt;/li&gt; 
 &lt;li&gt;Prevent or discourage use of dictionary words and common passwords through black-lists. For example, a set of commonly used passwords can be found on SecLists at &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&amp;nbsp;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password length:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password length considers the minimum and maximum length of characters comprising the password of your users. For ease of changing this length, its implementation can be configurable possibly using a properties file or xml configuration file.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;Minimum length. &lt;/b&gt;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Memory secrets shall be at least 8 characters long. &lt;/li&gt; 
  &lt;li&gt;Memory secrets generated automatically shall be at least 6 numeric characters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Maximum length. &lt;/b&gt;People tend to forget their passwords easily. The longer the password, the more likely people are to enter them incorrectly for the system. However, long pass-phrases can be easily remembered, and should not be prevented through unnecessarily strict upper restrictions on length. &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords with 64 characters or longer shall be permitted.&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password Complexity:&lt;/span&gt;&lt;/p&gt;&lt;/b&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Passwords with consecutive multiple spaces shall be coalesced and converter into only one space. After this modification, the password length shall be at least 12 characters long.&lt;/li&gt; 
 &lt;li&gt;Unicode characters shall be allowed in the password. A single Unicode code point is considered a character.&lt;/li&gt; 
 &lt;li&gt;Reject those passwords whose are commonly used and they have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords: &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Actual passwords must not be stored, to protect them against brute forcing if the database is compromised Screen reader support enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password Topologies:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ban commonly used password topologies.&lt;/li&gt; 
 &lt;li&gt;Force multiple users to use different password topologies.&lt;/li&gt; 
 &lt;li&gt;Require a minimum topology change between old and new passwords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Additional Information:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).&lt;/li&gt; 
 &lt;li&gt;As application's require more complex password policies, they need to be very clear about what these policies are. The required policy needs to be explicitly stated on the password change page&lt;/li&gt; 
 &lt;li&gt;If the new password doesn't comply with the complexity policy, the error message should describe EVERY complexity rule that the new password does not comply with, not just the 1st rule it doesn't comply with.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Blacklist Top Leaked Passwords" url="https://github.com/danielmiessler/SecLists/tree/master/Passwords"/>
            <reference name="NIST 800-63-B: 5.1.2.2" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="Owasp CheatSheet: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="A.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt; 
 &lt;li&gt;Verify the passwords comply with the company policy for strong passwords.&lt;/li&gt; 
 &lt;li&gt;If there is no policy, check the strength against industry standards as NIST or OWASP.&lt;/li&gt; 
&lt;/ol&gt;An example of strong password policy (&amp;nbsp; 
&lt;a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"&gt;from the OWASP Authentication Cheat Sheet&lt;/a&gt;) is: Password must meet at least 3 out of the following 4 complexity rules: 
&lt;ul&gt; 
 &lt;li&gt;at least 1 uppercase character (A-Z)&lt;/li&gt; 
 &lt;li&gt;at least 1 lowercase character (a-z)&lt;/li&gt; 
 &lt;li&gt;at least 1 digit (0-9)&lt;/li&gt; 
 &lt;li&gt;at least 1 special character (punctuation). Do not forget to treat space as special characters too&lt;/li&gt; 
 &lt;li&gt;at least 10 characters&lt;/li&gt; 
 &lt;li&gt;at most 128 characters&lt;/li&gt; 
&lt;/ul&gt;not more than 2 identical characters in a row (e.g., 111 not allowed).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" name="Send a message to the user each time the system detects that the user is logging in from a new device or IP" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Aside from the IP address, there are a number of different factors that can be used to attempt to fingerprint a device. Some of these can be obtained passively by the server from the HTTP headers (particularly the "User-Agent" header), including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Operating system&lt;/li&gt;&lt;li&gt;Browser&lt;/li&gt;&lt;li&gt;Language&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using JavaScript it is possible to access far more information, such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Screen resolution&lt;/li&gt;&lt;li&gt;Installed fonts&lt;/li&gt;&lt;li&gt;Installed browser plugins&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using these various attributes, it is possible to create a fingerprint of the device. This fingerprint can then be matched against any browser attempting to login to the account, and if it doesn't match then the user can be prompted for additional authentication. Many users will have multiple devices or browsers that they use, so it is not practical to block attempts that do not match the existing fingerprints.&lt;/p&gt;&lt;p&gt;To take in mind: data submitted from client can be spoofed by an attacker.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Credential Stuffing Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use the application and try to log in from different devices. Note the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Does the notification arrive?&lt;/li&gt;&lt;li&gt;Are the user's trusted devices saved in server (DB)?&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-525-CACHING" name="Set Cache-Control headers on sensitive and authenticated content" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Browsers, servers, and upstream/intermediate devices may cache (temporarily store) data sent in
                        HTTP sessions for performance reasons. The protocol allows for a number of HTTP headers and
                        directives to control what data may be cached, where, and for how long. It is important to specify
                        cache-controls to prevent the exposure of sensitive data through the inappropriate caching
                        of authenticated and otherwise restricted access data, either in the users' browser or other
                        devices.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Configure the server or application to set cache-control headers on sensitive content.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The following headers are recommended:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;
                        &lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;
                        &lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;
                        &lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;
                        &lt;li&gt;Pragma: no-cache&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
          </references>
          <standards>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure appropriate cache directives are returned for all sensitive and authenticated content.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the cache controls returned as part of these responses.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze cache headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The following is an example of what should be set to prevent a disclosure of sensitive data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;&lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;&lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;&lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;&lt;li&gt;Pragma: no-cache&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.934">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="store-passwords-unrecoverable-form" name="Store passwords in an unrecoverable form" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To protect user passwords from accidental or deliberate exposure, the application should store cryptographic hashes of passwords instead of the actual passwords.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not store actual passwords in the data storage for verification during login.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead, create a cryptographic hash of the password using a strong hash function that includes a work factor and a built in 'salt' value, like bcrypt or scrypt. This reduces the risk of brute-force attacks and rainbow tables, and allows flexibility to adapt the hashing function to balance security and performance. Establish some restrictions, depending on the used function:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The salt length must be at least 32 bits.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If bcrypt is used, the work factor must be as large as verification server performance allows, typically at least 13.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If we use the PBKDF2, the iteration count shall be as large as verification server performance allows, and it will typically allow at least 100,000 iterations.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Alternatively, use a strong hash function like SHA-384 together with a unique 'salt' value for every account.&amp;nbsp; Apply multiple iterations of the hash to create the additional computational work required to mitigate brute-force attacks. The secret 'salt' value must be stored separately from the hashed passwords.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="Owasp CheatSheetSeries: Password Storage" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Password_Storage_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.3.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Review the mechanism for matching credentials from the client-side to stored credentials for a user.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;Best practices dictate that the system should match a strong salted hash (SHA256 or greater and a unique hash for each account) to the one stored at the time the password was set.&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;For example, it is recommended to use a system salt of 32 bits or more, a keyed HMAC hash using &lt;span style="font-family: Arial; font-size: 11pt; font-weight: 700; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;SHA-2 or SHA-3,&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and the stretching algorithm PBKDF2 with at least 10,000 iterations.&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not a clear-text password&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not an encrypted password which may be recovered (decrypted) at the server- or client- side.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hashing algorithm in use is cryptographically secure (e.g. is not SHA1/MD5 or a flawed algorithm).&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hash is created from the password together with a unique salt value for the user. This prevents the use of rainbow tables, or the identification of password collisions among users.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Consider using an algorithm with a configurable work factor, set to a high value to inhibit attacks.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt; 
&lt;span&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.172">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-IMPLEMENT-LOGOUT" name="The logout function should be prominently visible to the user" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Developers must create a logout functionality that is clearly visible for the user when navigating the application.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if the logout functionality is accessible and how hard it is to disconnect from the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SIGN-REQUESTS" name="Use of digital signatures to make it easier for the receiver to authenticate if the sender is really the person they think they are" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Making use of digital signatures on exchanged messages will make it more difficult for man-in-the-middle attacks to occur, so add a digital signature to your important messages if you want to verify the sender identity.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Top Ten Proactive Controls 2018 - C6: Implement Digital Identity" url="https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity"/>
            <reference name="RFC7515" url="https://tools.ietf.org/html/rfc7515"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review code application and configuration&lt;/li&gt;&lt;li&gt;Check the exchanged messages and verify if signature is being used.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-ONE-TIME-PASSWORD" name="Use one-time passwords" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use One Time Password (TOTP) codes. This can be achieved with:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hardware&lt;/li&gt;&lt;li&gt;Software (cheaper option).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Software option would typically involve the user installing a TOTP application on their mobile phone, and then scanning a QR code provided by the web application which provides the initial seed. The authenticator app then generates a six digit number every 30 or 60 seconds.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Multi-Factor Authentication Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try logging into the application several times:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Do you use the same password all the time?&lt;/li&gt;&lt;li&gt;Or do you use a different password each time?&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.648">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-RANDOM-SESSION-KEYS" name="Use random-session session keys, which are time-specific and will change with time making it difficult for an attacker to fool the receiver with an old message" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks, where an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good Cryptographically Secure Pseudorandom Number Generator must be used.&lt;/p&gt;&lt;p&gt;Additionally, a random session ID is not enough; it must also be unique to avoid duplicated IDs. A random session ID must not already exist in the current session ID space.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Log in and log out, while saving the session IDs and check:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The session id is different in every log in to the application?&lt;/li&gt;&lt;li&gt;Is it predictable? For example, one session ID is 123ABC&lt;strong&gt;D&lt;/strong&gt; and the next 123ABC&lt;strong&gt;E&lt;/strong&gt; (the example contains a short key to understanding).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To perform these checks it is possible to use DevTools from the browser or an easier way using a proxy to logall requests.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.3" name="Use short expiration time" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A short expiration time for tokens is a means of protection against
   the following threats:&amp;nbsp;  
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;replay&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;token leak (a short expiration time will reduce impact)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;online guessing (a short expiration time will reduce the
      likelihood of success)&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;
Note: Short token duration requires more precise clock synchronization between the authorization server and resource server. Furthermore, shorter duration may require more token refreshes (access token) or repeated end-user authorization processes (authorization "code" and refresh token).</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the token expiration time in the authorization server policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.648">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:07.648">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="SAML-2.0-SC-C-6.4.3" name="Verify SAML assertion signatures and authenticate the issuer" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  The browser/POST profile requires the SAML response carrying SAML assertions to be signed, thus providing both message integrity and authentication. The Service Provider site MUST verify the signature and authenticate the issuer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   The following recommendations were proposed in response: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Always perform schema validation on the XML document prior to using it for any security--related purposes:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Always use local, trusted copies of schemas for validation.&lt;/li&gt; 
    &lt;li&gt;Never allow automatic download of schemas from third party locations.&lt;/li&gt; 
    &lt;li&gt;If possible, inspect schemas and perform schema hardening, to disable possible wildcard -type or relaxed processing statements.&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;li&gt;Securely validate the digital signature:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If you expect only one signing key, use StaticKeySelector. Obtain the key directly from the identity provider, store it in local file and ignore any KeyInfo elements in the document.&lt;/li&gt; 
    &lt;li&gt;If you expect more than one signing key, use X509KeySelector (the JKS variant). Obtain these keys directly form the identity providers, store them in local JKS and ignore any KeyInfo elements in the document.&lt;/li&gt; 
    &lt;li&gt;If you expect a heterogeneous signed documents (many certificates from many identity providers, multi-level validation paths), implement full trust establishment model based on PKIX and trusted root certificates.&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;li&gt;Avoid signature-wrapping attacks.&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Never use getElementsByTagName to select security related elements in an XML document without prior validation.&lt;/li&gt; 
    &lt;li&gt;Always use absolute XPath expressions to select elements, unless a hardened schema is used for validation.&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Assertions and Protocols for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
            <reference name="OWASP SAML Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/SAML_Security_Cheat_Sheet.md"/>
            <reference name="Profiles for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf"/>
            <reference name="Security and Privacy Considerations for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-sec-consider-2.0-os.pdf"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-49-BRUTE-FORCE-AUTH" issueId="" issueLink="" name="Attackers can brute force the authentication system to find valid credentials" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Hackers launch brute-force attacks using widely available tools that utilize wordlists and smart rulesets to intelligently and automatically guess user passwords. Although such attacks are easy to detect, they are not so easy to prevent.&lt;/p&gt;&lt;p&gt;For example, many HTTP brute-force tools can relay requests through a list of open proxy servers. Since each request appears to come from a different IP address, you cannot block these attacks simply by blocking the IP address. To further complicate things, some tools try a different username and password on each attempt, so you cannot lock out a single account for failed password attempts.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="50"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1110.001" url="https://attack.mitre.org/techniques/T1110/001"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="16"/>
                <countermeasure ref="C-ACCOUNT-LOCKDOWN" mitigation="16"/>
                <countermeasure ref="CWE-654" mitigation="16"/>
                <countermeasure ref="network-rate-limit" mitigation="20"/>
                <countermeasure ref="require-use-strong-passwords" mitigation="16"/>
                <countermeasure ref="security-logging" mitigation="16"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-115-LOGIN-BYPASS" issueId="" issueLink="" name="Attackers can bypass the login system using a less hardened alternative for accessing the system" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The basic way to take advantage of the application's access control flaws is called "forced browsing".&lt;/p&gt;&lt;p&gt;Let's say that the website http://mysite.com It is a website that supports the authenticity of the user and the administrator will be taken to the appropriate webpage after validation. But if an attacker knows the URL, he or she can enter it in their browser, for example&lt;/p&gt;&lt;p&gt;http://mysite.com/admin_page or http://mysite.com/user_page&lt;/p&gt;&lt;p&gt;If it is a secure website, it will be redirected to the login page. But if those pages are allowed to be accessed, it will be incomplete access control and will cause damage.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" mitigation="20"/>
                <countermeasure ref="C-AUTHZ-AFTER-AUTHN" mitigation="20"/>
                <countermeasure ref="CWE-603" mitigation="20"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="20"/>
                <countermeasure ref="security-logging" mitigation="20"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-130-DOS-AUTH" issueId="" issueLink="" name="Attackers can execute Denial of Service attacks to prevent valid users from accessing the system" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker leverages the security functionality of the system aimed at thwarting potential attacks (like automatic block of accounts after a number of failed login attempts) to launch a denial of service attack against a legitimate system user.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="25"/>
                <countermeasure ref="C-THREAD-CONCURRENCY" mitigation="25"/>
                <countermeasure ref="network-rate-limit" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-180-SAML-SPOOFING" issueId="" issueLink="" name="Attackers can modify the SAML response from the Identify Provider and change assertions' values to impersonate valid users in the Service Provider" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Sometimes not only does the Service Provider fail to check the validity of the signature in the SAML response, but it doesn't even verify its mere presence. The equivalent of a Service Provider accepting unsigned SAML assertions is accepting a username without checking the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-SAML-VERIFY-IDP-X509" mitigation="50"/>
                <countermeasure ref="SAML-2.0-SC-C-6.4.3" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-593-SSO-SYNC" issueId="" issueLink="" name="Attackers are able to keep their application session active after the SSO/IdP blocks/deletes their account" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If a user successfully logs in via SSO and falls prey to a phishing attack, the attacker gets access to all the endpoints of the external applications within the cloud that the user is provisioned for.&lt;/p&gt;&lt;p&gt;If the attack is detected, the user account can be disabled. However, the user may still remain logged in. This could allow the attacker to stay logged on with access to the linked application.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-FORCE-LOGOUT" mitigation="50"/>
                <countermeasure ref="security-logging" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-60-MALICIOUS-REPLY" issueId="" issueLink="" name="Attackers use replay attacks to execute malicious actions" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;A replay attack is a kind of man-in-the-middle attack in which an attacker sniffs messages being sent on a channel to intercept them and resend them under the cloak of authentic messages. What makes the replay attack particularly harmful is that the attacker does not even need to decrypt the message they resend but can still fool the receiver into thinking that the received message is legitimate.&lt;/p&gt;&lt;p&gt;One example of replay attack is called pass the hash. This is referring to the hash value that is associated with a password that is sent across the network during the authentication process. If the attacker can gain access to the hash, they may be able to replay that hash back to the server and pretend that they are the original workstation.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1134.001" url="https://attack.mitre.org/techniques/T1134/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1550.004" url="https://attack.mitre.org/techniques/T1550/004"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-ONE-TIME-PASSWORD" mitigation="20"/>
                <countermeasure ref="C-RANDOM-SESSION-KEYS" mitigation="20"/>
                <countermeasure ref="C-SET-TIMESTAMP-ON-REQUEST" mitigation="20"/>
                <countermeasure ref="C-SIGN-REQUESTS" mitigation="20"/>
                <countermeasure ref="RFC6819-5.1.5.3" mitigation="20"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-600-CRED-STUFFING" issueId="" issueLink="" name="Attackers take control of another user's account without being detected if they get to know the password for that account" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Credential stuffing is the automated injection of stolen username and password pairs ("credentials") in to website login forms, in order to fraudulently gain access to user accounts.&lt;/p&gt;&lt;p&gt;Since many users will re-use the same password and username/email, when those credentials are exposed (by a database breach or phishing attack, for example) submitting those sets of stolen credentials into dozens or hundreds of other sites can allow an attacker to compromise those accounts too.&lt;/p&gt;&lt;p&gt;Credential Stuffing is a subset of the brute force attack category. Brute forcing will attempt to try multiple passwords against one or multiple accounts; guessing a password, in other words. Credential Stuffing typically refers to specifically using known (breached) username / password pairs against other websites.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="50"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1110.004" url="https://attack.mitre.org/techniques/T1110/004"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-IMPLEMENT-SSO" mitigation="20"/>
                <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" mitigation="20"/>
                <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" mitigation="20"/>
                <countermeasure ref="CWE-654" mitigation="20"/>
                <countermeasure ref="security-logging" mitigation="20"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-600-SESSION-REUSE" issueId="" issueLink="" name="An attacker can reuse old session credentials or session IDs for authorization" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;At his town's public library, John logs onto his bank's Web site to transfer money from his checking account to his savings account. Once John completes his transaction he gets distracted, forgets to sign off from his bank's Web site, and walks away from the computer.&amp;nbsp;&lt;/p&gt;&lt;p&gt;A second user, Malcolm, now uses the same computer as John. Instead of using the browser to navigate to a new site, Malcolm simply explores the browser history to return to the previous URL where John's account information was displayed.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Because John's session is still active Malcolm can now transfer money, open new accounts, order additional credit cards, or perform any other actions available to John via the bank's Web site.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-IMPLEMENT-LOGOUT" mitigation="50"/>
                <countermeasure ref="C-TOKEN-TIMEOUT" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-61-SESSION-FIXATION" issueId="" issueLink="" name="The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The attack consists of obtaining a valid session ID (e.g. by connecting to the application), inducing a user to authenticate himself with that session ID, and then hijacking the user-validated session by the knowledge of the used session ID. The attacker has to provide a legitimate Web application session ID and try to make the victim's browser use it. There are several techniques to execute the attack; it depends on how the Web application deals with session tokens. Below are some of the most common techniques:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Session token in the URL argument.&lt;/li&gt;&lt;li&gt;Session token in a hidden form field.&lt;/li&gt;&lt;li&gt;Session ID in a cookie.&lt;/li&gt;&lt;li&gt;Client-side script.&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-SESSION-ID-ON-PARAMETER" mitigation="50"/>
                <countermeasure ref="secure-session-generation-and-expiration" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-37-CACHED-DATA" issueId="" issueLink="" name="Sensitive data is compromised by inspecting cached data in the client side" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-524" mitigation="50"/>
                <countermeasure ref="CWE-525-CACHING" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-575-ENUM-USERS" issueId="" issueLink="" name="Attackers can enumerate the existence of valid accounts in the system using error/informational messages" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If your login page has different error messages for unrecognized usernames and incorrect passwords, an attacker can write a script to submit lengthy lists of common usernames and test the response. With those results, the attacker can then infer which usernames are valid.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="security-logging" mitigation="33"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-37-CRACK-PASSWORD-HASH" issueId="" issueLink="" name="A malicious user has access to the users' password hashes and tries to crack the passwords" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Although it is not possible to "decrypt" password hashes to obtain the original passwords, it is possible to "crack" the hashes in some circumstances.&lt;/p&gt;&lt;p&gt;The basic steps are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Select a password you think the victim has chosen (e.g.password1!).&lt;/li&gt;&lt;li&gt;Calculate the hash.&lt;/li&gt;&lt;li&gt;Compare the hash you calculated with the hash of the victim. If they match, you have correctly "cracked" the hash and now know the plaintext value of their password.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This process is repeated for a large number of potential passwords. Different methods can be used to select candidate passwords, including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lists of passwords obtained from other compromised sites.&lt;/li&gt;&lt;li&gt;Brute force (trying every possible candidate).&lt;/li&gt;&lt;li&gt;Dictionaries or wordlists of common passwords&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="store-passwords-unrecoverable-form" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-37-SENSITIVE-DATA-URL" issueId="" issueLink="" name="Sensitive data is compromised through query parameters in the URL" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Regardless of using encryption, the following URL will expose information in the locations detailed below:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;https://vulnerablehost.com/authuser?user=bob&amp;amp;authz_token=1234&amp;amp;expire=1500000000&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The parameter values for user, authz_token, and expire will be exposed in the following locations when using HTTP or HTTPS:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Referer Header&lt;/li&gt;&lt;li&gt;Web Logs&lt;/li&gt;&lt;li&gt;Shared Systems&lt;/li&gt;&lt;li&gt;Browser History&lt;/li&gt;&lt;li&gt;Browser Cache&lt;/li&gt;&lt;li&gt;Shoulder Surfing&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-598" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-112-OTP-GENERATION-ABUSE" issueId="" issueLink="" name="An attacker can send a lot of OTP requests to increase the likelihood of matching one of the generated codes in a later brute force attack" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, in a password reset functionality based on the delivery of a code by email or SMS to the user, an attacker can send a lot of requests to it, generating a lot of valid codes with the goal of increasing the chances of matching the code in a brute force attack. The attack takes place in the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Automation of requests to the password reset functionality (new codes don't invalidate older ones).&lt;/li&gt;&lt;li&gt;Creation of a custom dictionary to try to match valid codes (e.g.: if a code has only 5 numbers, the dictionary is as follows: [00000, 00001,..., 99999]).&lt;/li&gt;&lt;li&gt;Brute force attack on the functionality to check the OTP and find a match.&lt;/li&gt;&lt;li&gt;Once the attacker knows a valid code he/she can proceed with the password change.&lt;/li&gt;&lt;/ol&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-OTP-BRUTE-FORCE" mitigation="50"/>
                <countermeasure ref="C-OTP-INVALID" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-137-INJECTION" issueId="" issueLink="" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="f3865b3b-5934-4317-b99f-10ae6e2bdae3" diagramComponentId="26f213e6-b2d3-4cb3-8e72-99c6fa4437a7" ref="270dc232-49b6-454b-b390-1409299f5895" name="Other database" desc="" library="CS-Default" parentComponentRef="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" componentDefinitionRef="other" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets>
        <asset name="Customer Data" accessType="50"/>
        <asset name="Personally Identifiable Information" accessType="50"/>
      </assets>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.811">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.030">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:58.988">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.030">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:06.031">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="41" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Use an account with only the minimum set of permissions required to access the data store. The account should not be able to perform operations that are not explicitly required by the component that performs these operations. For example, if a web application needs to read data from certain tables and insert and update data from others, then a database account with only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt; 
 &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt; 
 &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary permissions are assigned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.667">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public domain, they get included in automated exploitation suites like Metasploit and a wider less skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales. &amp;nbsp;There is often a small window between the release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting services to ensure the project team is promptly aware of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest (e.g. databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="41" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of the service and its attack surface; and the likelihood of a malicious actor gaining access to the system.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Apply network layer security controls so that only the necessary and expected IP addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that the network access to the service is only allowed for the components which need it.&lt;/li&gt; 
 &lt;li&gt;There should be a firewall protecting the network segment in which the service is installed.&lt;/li&gt; 
 &lt;li&gt;Check that the firewall restricts all access and only permits the minimum connections required using the principal of least privilege.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:05.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="41" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Dataflows" source="DATAFLOW_RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-22T14:42:58.598">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" issueId="" issueLink="" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-115" issueId="" issueLink="" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" issueId="" issueLink="" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="VULN-SERVICE" issueId="" issueLink="" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="IR-Dataflows">
          <threats>
            <threat ref="CAPEC-66" issueId="" issueLink="" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="DATAFLOW_RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Dataflows" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1bd4a2f8-b3bf-413c-b8a4-1800ef8005db" diagramComponentId="af8dabc9-5084-4165-90fb-32abd28a1cda" ref="3f0245f6-951a-4fe1-aec6-3a37d351a26c" name="Plugin System" desc="" library="IR-Functional-Components" parentComponentRef="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" componentDefinitionRef="CD-PLUGIN-SYSTEM" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.476">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.476">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.476">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.475">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-94" name="The application executes code retrieved from untrusted data sources" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The execution of untrusted code potentially grants direct control over the application; allowing an attacker to perform arbitrary operations, steal sensitive data, or use the application to launch other malicious attacks.&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.476">
              <output/>
            </source>
            <references>
              <reference name="CWE-94: Improper Control of Generation of Code ('Code Injection')" url="https://cwe.mitre.org/data/definitions/94.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-PLUGIN-PERMISSIONS" name="Assign specific permissions and privileges to plugins based on their intended functionality" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Assign specific permissions and privileges to plugins based on their intended functionality&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Assigning specific permissions and privileges to plugins can help to limit the resources and actions that plugins are able to access or perform within the system. This can help to prevent malicious plugins from accessing sensitive resources or performing unauthorized actions that could compromise the security of the system.&lt;/p&gt;&lt;p&gt;When assigning permissions and privileges to plugins, it is important to consider the specific functionality and requirements of each plugin. For example, a plugin that provides read-only access to a database may only require read permissions, while a plugin that performs write operations may require write permissions.&lt;/p&gt;&lt;p&gt;By assigning specific permissions and privileges to plugins based on their intended functionality, you can help to ensure that plugins are only able to access or perform the actions that are necessary for their intended purpose, reducing the risk of plugin-related attacks and protecting the security of the system.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the specific functionality and requirements of each plugin. This can be done by reviewing the plugin documentation or by analyzing the plugin code.&lt;/li&gt;&lt;li&gt;Assign specific permissions and privileges to each plugin based on its intended functionality. This can involve creating custom roles or permissions for each plugin, or using existing roles or permissions that are appropriate for the plugin.&lt;/li&gt;&lt;li&gt;Configure access controls and permissions for the plugin system to ensure that plugins are only able to access or perform the actions that are necessary for their intended purpose. This can involve using role-based access controls, attribute-based access controls, or other access control mechanisms.&lt;/li&gt;&lt;li&gt;Regularly review and update the permissions and privileges assigned to plugins to ensure that they remain appropriate and relevant to their intended functionality.&lt;/li&gt;&lt;li&gt;Monitor plugin activity and resource usage to detect any unusual or unauthorized behavior that could indicate a security breach or compromise.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;Assigning specific permissions and privileges to plugins can have an impact on the performance. This is because the access control mechanisms used to enforce these permissions and privileges require additional computation and resource usage to check and enforce access.&lt;/p&gt;&lt;p&gt;To minimize the impact, it is important to carefully consider the requirements and limitations of the plugin system and the specific use case when assigning permissions and privileges to plugins. This may involve using lightweight access control mechanisms, optimizing the access control process for maximum efficiency, and monitoring resource usage to prevent excessive resource consumption.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the plugin documentation: Familiarize yourself with the documentation provided by the plugin developers. Look for any information regarding the specific permissions and privileges required for each plugin.&lt;/li&gt;&lt;li&gt;Identify the intended functionality of each plugin: Determine the intended purpose and functionality of each plugin. Understand the specific actions the plugins are designed to perform and the resources they may require access to.&lt;/li&gt;&lt;li&gt;Develop a permissions matrix: Create a matrix that lists all the plugins being used and their intended functionality. Identify the permissions and privileges required by each plugin to fulfill its intended purpose.&lt;/li&gt;&lt;li&gt;Configure permissions and privileges: Access the system or platform where the plugins are installed and configure the permissions and privileges accordingly. Ensure that the assigned permissions align with the intended functionality of each plugin as identified in the permissions matrix.&lt;/li&gt;&lt;li&gt;Test plugin functionality: Test each plugin to verify that it can perform its intended actions and access the necessary resources. Execute various scenarios and use cases to validate that the permissions and privileges assigned to the plugins do not hinder their functionality.&lt;/li&gt;&lt;li&gt;Test restricted functionality: Verify that the plugins are appropriately restricted from performing actions outside their intended functionality. Attempt to execute actions or access resources that are not within the scope of each plugin's permissions. The system should prevent or deny such unauthorized actions.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-PLUGIN-SANDBOX" name="Consider using a sandboxed environment or runtime that restricts the execution environment" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Consider using a sandboxed environment or runtime that restricts the execution environment.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A sandboxed environment is a controlled environment that limits the resources and permissions available to an application or process, preventing it from accessing sensitive data or system resources. By using a sandboxed environment or runtime for plugins, the execution of plugins can be restricted to a secure and isolated environment, preventing them from accessing sensitive data or system resources outside of the sandbox. This can help to mitigate the risk of malicious plugins executing unauthorized code and compromising the security of the system.&lt;/p&gt;&lt;p&gt;Implementing a sandboxed environment or runtime for plugins requires careful consideration of the requirements and limitations of the plugin system and the specific use case. It may involve configuring access controls, limiting resource usage, and monitoring plugin activity within the sandbox.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the plugin systems and applications that are most critical to the security of your software environment. These are the systems that should be prioritized for sandboxing.&lt;/li&gt;&lt;li&gt;Research and evaluate sandboxing tools or runtimes that are suitable for your plugin systems and applications. Consider factors such as compatibility, security features, and ease of use.&lt;/li&gt;&lt;li&gt;Develop a sandboxing strategy that outlines how plugins will be sandboxed, what resources will be restricted, and how access controls will be configured.&lt;/li&gt;&lt;li&gt;Configure access controls to limit the resources and permissions available to plugins within the sandbox. This may include restricting network access, file system access, and system privileges.&lt;/li&gt;&lt;li&gt;Monitor plugin activity within the sandbox to detect any unusual or suspicious behavior. This can be done using monitoring tools or by implementing logging and auditing mechanisms.&lt;/li&gt;&lt;li&gt;Limit resource usage within the sandbox to prevent plugins from consuming excessive resources. This can help to prevent denial-of-service attacks and other resource-intensive attacks.&lt;/li&gt;&lt;li&gt;Ensure that plugins are properly authenticated, validated, and authorized before they are executed within the sandbox. This can help to prevent the execution of malicious plugins.&lt;/li&gt;&lt;li&gt;Download plugins only from trusted sources and verify their authenticity before installing them within the sandbox.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;Implementing a sandboxed environment or runtime for plugins can have an impact on the performance of the application. To minimize it, it is important to carefully consider the requirements and limitations of the plugin system and the specific use case when implementing a sandboxed environment or runtime. This may involve configuring access controls to balance security and performance, monitoring resource usage within the sandbox, and optimizing the sandboxing process for maximum efficiency.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="CWE CATEGORY: Privilege / Sandbox Issues" url="https://cwe.mitre.org/data/definitions/265.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify that a sandboxed environment or runtime has been implemented for the plugin system. This can be done by reviewing the system architecture and configuration.&lt;/li&gt;&lt;li&gt;Verify that access controls have been configured to limit the resources and permissions available to plugins within the sandbox. This can be done by attempting to access restricted resources or perform unauthorized actions within the sandbox.&lt;/li&gt;&lt;li&gt;Verify that resource usage within the sandbox is being monitored and limited to prevent plugins from consuming excessive resources. This can be done by monitoring resource usage metrics and attempting to perform resource-intensive actions within the sandbox.&lt;/li&gt;&lt;li&gt;Verify that plugins are being properly authenticated, validated, and authorized before they are executed within the sandbox. This can be done by attempting to execute a malicious plugin or a plugin that has not been properly authenticated or authorized.&lt;/li&gt;&lt;li&gt;Verify that plugins are being downloaded only from trusted sources and that their authenticity is being verified before installation within the sandbox. This can be done by attempting to download and install a plugin from an untrusted source or a plugin that has not been properly verified.&lt;/li&gt;&lt;li&gt;Attempt to execute a plugin outside of the sandboxed environment or runtime and verify that it is unable to access restricted resources or perform unauthorized actions.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-PLUGIN-DATA-ENCRYPTION" name="Encrypt sensitive data at rest and in transit within the plugin system" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Encrypt sensitive data at rest and in transit within the plugin system&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest and in transit involves the implementation of encryption techniques to protect sensitive data stored and transmitted within the plugin system. Encryption ensures that data is transformed into a secure and unreadable format, providing confidentiality and integrity.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Encrypting data at rest: It involves applying encryption to sensitive data when it is stored or persisted within the plugin system. This could include encrypting data in databases, file systems, or any other storage mechanisms used by the plugins. Encryption prevents unauthorized access to the data even if the storage medium is compromised.&lt;/li&gt;&lt;li&gt;Encrypting data in transit: It focuses on securing data as it is transmitted between different components or systems within the plugin environment. This includes encrypting data sent over networks, APIs, or any communication channels utilized by the plugins. Encryption safeguards the data from interception or tampering during transit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Encryption algorithms and protocols: Select strong encryption algorithms and protocols that are considered secure and widely accepted within the industry. Examples include AES (Advanced Encryption Standard) for data at rest and TLS (Transport Layer Security) for data in transit.&lt;/li&gt;&lt;li&gt;Key management: Develop robust key management practices to ensure the secure generation, storage, distribution, rotation, and revocation of encryption keys. Proper key management is essential for maintaining the confidentiality and integrity of the encrypted data.&lt;/li&gt;&lt;li&gt;Data classification and scope: Identify and classify the sensitive data that requires encryption within the plugin system. Clearly define the scope of what data needs to be encrypted, taking into account regulatory requirements and privacy considerations.&lt;/li&gt;&lt;li&gt;Encryption implementation: Implement encryption mechanisms at appropriate points within the plugin system. This may involve integrating encryption libraries, utilizing encryption modules or APIs, or leveraging encryption capabilities provided by the underlying infrastructure or platform.&lt;/li&gt;&lt;li&gt;Certificate management: When encrypting data in transit, employ digital certificates for secure communication channels. Properly manage and validate certificates to ensure the authenticity and integrity of the encryption process.&lt;/li&gt;&lt;li&gt;Testing and validation: Conduct thorough testing to verify the effectiveness and correctness of the encryption implementation. Validate that sensitive data is encrypted both at rest and in transit, and that decryption is only possible with authorized access and proper authentication.&lt;/li&gt;&lt;li&gt;Compliance and auditing: Ensure that the encryption practices implemented align with relevant regulatory requirements and industry standards. Maintain proper documentation and conduct periodic audits to validate compliance and adherence to encryption policies.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;Implementing encryption within the plugin system can have an impact on the performance of the application. The extent of the impact depends on various factors, including the encryption algorithms used, the size and complexity of the data being encrypted, the processing power of the system, and the efficiency of the encryption implementation.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST Special Publication 800-111: Guide to Storage Encryption Technologies for End User Devices" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-111.pdf"/>
            <reference name="OWASP Cryptographic Storage Cheat_Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify sensitive data: Determine the types of sensitive data that need encryption within the plugin system.&lt;/li&gt;&lt;li&gt;Data at rest testing: Verify that the selected sensitive data is properly encrypted when stored or persisted within the plugin system.&lt;/li&gt;&lt;li&gt;Data in transit testing: Ensure that sensitive data is transmitted over secure communication channels using appropriate encryption protocols, such as TLS/SSL.&lt;/li&gt;&lt;li&gt;Key management testing: Evaluate the secure generation, storage, rotation, and revocation of encryption keys.&lt;/li&gt;&lt;li&gt;Performance impact assessment: Measure the impact of encryption on system performance, including encryption/decryption time and network latency.&lt;/li&gt;&lt;li&gt;Compliance validation: Confirm that the encryption implementation aligns with relevant regulatory requirements and industry standards.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.417">
              <output/>
            </source>
            <references>
              <reference name="Testing TLS/SSL encryption" url="https://testssl.sh/"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-PLUGIN-CODE-REVIEW" name="Implement a thorough code review process for all plugins before allowing them to be installed or executed" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement a thorough code review process for all plugins before allowing them to be installed or executed&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Implement a code review process involves conducting a comprehensive examination of the code within plugins before permitting their installation or execution. This process aims to identify and mitigate potential security vulnerabilities, malicious code, or unintended functionality that could pose a threat to the system or platform.&lt;/p&gt;&lt;p&gt;By implementing a thorough code review process, organizations can gain better control over the quality and security of the plugins being utilized, ensuring that they align with the intended functionality and meet the required security standards. This countermeasure provides an additional layer of protection against potential risks associated with plugins, as it allows for the identification and removal of any malicious or vulnerable code.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Establish code review guidelines: Develop a set of guidelines or standards that define the criteria for code review. These guidelines should encompass security best practices, coding standards, and compliance requirements specific to the organization or platform.&lt;/li&gt;&lt;li&gt;Assign trained reviewers: Designate individuals or a team with expertise in code analysis and security to conduct the reviews. Ensure that they have the necessary knowledge and skills to identify potential security issues, vulnerabilities, and coding flaws.&lt;/li&gt;&lt;li&gt;Review process integration: Incorporate the code review process into the overall software development lifecycle (SDLC) or plugin management process. Define at which stage of the process the code review should occur to minimize any delays in installation or execution.&lt;/li&gt;&lt;li&gt;Review tools and automation: Leverage code analysis and review tools to assist in the review process. These tools can help identify common security vulnerabilities and coding errors more efficiently, increasing the effectiveness and speed of the code review.&lt;/li&gt;&lt;li&gt;Security-focused code review: Focus the code review process on identifying security-related issues, such as input validation flaws, access control vulnerabilities, insecure data handling, and potential injection attacks. Look for any indicators of malicious code, including backdoors, logic bombs, or unauthorized data exfiltration.&lt;/li&gt;&lt;li&gt;Documentation and tracking: Maintain thorough documentation of the code review process, including any identified issues, their severity, and the corresponding actions taken to address them. Track the progress of each code review to ensure that all plugins undergo the necessary scrutiny before installation or execution.&lt;/li&gt;&lt;li&gt;Ongoing code review: Establish a process for periodic or regular code reviews of installed plugins. This ensures that any code changes or updates to plugins are also subject to review, reducing the risk of introducing vulnerabilities through subsequent modifications.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;Implementing a thorough code review process for all plugins before allowing them to be installed or executed can have an impact on the performance of the application. The extent of the impact depends on various factors such as the size and complexity of the plugins, the frequency of code reviews, and the efficiency of the code review process itself.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Understand the code review process: Gain a clear understanding of the defined code review process and its requirements.&lt;/li&gt;&lt;li&gt;Review documentation: Evaluate the documentation that outlines the code review process, including guidelines and checklists.&lt;/li&gt;&lt;li&gt;Perform sample code reviews: Simulate the code review process by conducting sample reviews on representative plugins.&lt;/li&gt;&lt;li&gt;Review documentation and tracking: Validate that comprehensive documentation is maintained, capturing identified issues, severity, and actions taken to address them. Verify the accuracy of the code review tracking process.&lt;/li&gt;&lt;li&gt;Assess code review integration: Ensure that the code review process is seamlessly integrated into the overall software development or plugin management process.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-INTEGRITY-PLUGIN-CODE" name="Implement mechanisms to verify the integrity of plugin code at runtime" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement mechanisms to verify the integrity of plugin code at runtime&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Verifying the integrity of plugin code at runtime involves checking that the code has not been modified or tampered with since it was installed or last verified. This can help to prevent malicious plugins from executing unauthorized code and compromising the security of the system.&lt;/p&gt;&lt;p&gt;Implementing mechanisms to verify the integrity of plugin code at runtime may involve using techniques such as code signing, checksum verification, or digital signatures. These techniques can be used to ensure that the plugin code has not been modified or tampered with since it was signed or verified.&lt;/p&gt;&lt;p&gt;By implementing mechanisms to verify the integrity of plugin code at runtime, you can help to ensure that only trusted and authorized plugins are executed within the system, and that the security of the system is not compromised by malicious plugins.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement code signing for plugins. This involves signing the plugin code using a digital certificate, which can be verified at runtime to ensure that the code has not been modified or tampered with.&lt;/li&gt;&lt;li&gt;Use checksum verification to verify the integrity of plugin code at runtime. This involves calculating a checksum value for the plugin code at install time, and then verifying that the checksum value matches at runtime to ensure that the code has not been modified.&lt;/li&gt;&lt;li&gt;Use digital signatures to verify the integrity of plugin code at runtime. This involves using cryptographic techniques to sign the plugin code and verify the signature at runtime to ensure that the code has not been modified or tampered with.&lt;/li&gt;&lt;li&gt;Implement runtime integrity checking mechanisms that monitor the execution of plugins and detect any unauthorized modifications or tampering.&lt;/li&gt;&lt;li&gt;Limit access to plugin installation directories and files to prevent unauthorized modification or tampering of plugin code.&lt;/li&gt;&lt;li&gt;Regularly update and patch the plugin system and its dependencies to address any known vulnerabilities or weaknesses that could be exploited by attackers.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;Implementing mechanisms to verify the integrity of plugin code can have an impact on the performance. This is because the verification process involves additional computation and resource usage to check the integrity of the plugin code.&lt;/p&gt;&lt;p&gt;To minimize the impact, it is important to carefully consider the requirements and limitations of the plugin system and the specific use case when implementing mechanisms to verify the integrity of plugin code at runtime. This may involve using lightweight verification mechanisms, optimizing the verification process for maximum efficiency, and monitoring resource usage to prevent excessive resource consumption.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting Software Integrity through code signing" url="https://ws680.nist.gov/publication/get_pdf.cfm?pub_id=925977"/>
            <reference name="Top 25 Series - Rank 20 - Download of Code Without Integrity Check" url="https://software-security.sans.org/blog/2010/04/05/top-25-series-rank-20-download-code-integrity-check/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify that the plugin code is signed or checksummed at install time. This can be done by reviewing the installation process and verifying that the code is signed or checksummed.&lt;/li&gt;&lt;li&gt;Verify that the plugin code is verified at runtime to ensure that it has not been modified or tampered with. This can be done by monitoring the verification process and verifying that it detects any unauthorized modifications or tampering.&lt;/li&gt;&lt;li&gt;Verify that access to plugin installation directories and files is limited to prevent unauthorized modification or tampering of plugin code. This can be done by attempting to modify or tamper with the plugin code within the installation directories and files.&lt;/li&gt;&lt;li&gt;Verify that runtime integrity checking mechanisms are in place and are able to detect any unauthorized modifications or tampering of plugin code. This can be done by attempting to modify or tamper with the plugin code at runtime and verifying that the mechanisms detect the unauthorized changes.&lt;/li&gt;&lt;li&gt;Verify that the plugin system and its dependencies are regularly updated and patched to address any known vulnerabilities or weaknesses that could be exploited by attackers. This can be done by reviewing the update and patching process and verifying that it is effective in addressing vulnerabilities and weaknesses.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.417">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-HASHING-THECHNIQUES" name="Use code signing or hashing techniques to detect any modifications or tampering" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use code signing or hashing techniques to detect any modifications or tampering&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Code signing entails digitally signing the code with a cryptographic signature, using a trusted certificate, to verify its authenticity and integrity. Hashing techniques generate unique hash values or checksums for the code, allowing subsequent comparisons to detect any alterations or tampering. This countermeasure help protect against unauthorized modifications, ensure the code's integrity, and establish trust in the software or code's source and integrity.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implementation of Code Signing: Obtain a digital certificate from a trusted certificate authority (CA) and use it to digitally sign the code. This process involves generating a cryptographic signature that validates the authenticity and integrity of the code.&lt;/li&gt;&lt;li&gt;Verification of Code Signatures: Implement a verification process to validate the digital signatures of the code during runtime or installation. This ensures that the code has not been tampered with or modified since it was signed.&lt;/li&gt;&lt;li&gt;Secure Storage of Certificates: Safely store the digital certificates used for code signing in a secure location, protecting them from unauthorized access or tampering.&lt;/li&gt;&lt;li&gt;Periodic Certificate Renewal: Regularly review the expiration dates of the digital certificates and renew them in a timely manner to maintain the validity of code signatures.&lt;/li&gt;&lt;li&gt;Secure Distribution of Code: Establish secure distribution channels for the code, ensuring that it is not compromised during transit. Implement measures such as secure file transfer protocols (e.g., HTTPS) or code signing during deployment to maintain the integrity of the code.&lt;/li&gt;&lt;li&gt;Hash Verification: Implement hashing techniques to compute and store hash values or checksums for the code files. Periodically compare these hash values against the current versions to detect any modifications or tampering.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;Implementing code signing or hashing techniques have a minimal impact on the performance.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Introduction to Code Signing" url="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms537361(v=vs.85)"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify code signature validation, including testing for tampered or invalid signatures.&lt;/li&gt;&lt;li&gt;Compare hash values to detect unauthorized modifications.&lt;/li&gt;&lt;li&gt;Test code distribution channels for integrity and tampering detection.&lt;/li&gt;&lt;li&gt;Validate certificate validity and renewal processes.&lt;/li&gt;&lt;li&gt;Evaluate performance impact of the control.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:01.416">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-09T13:57:37.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-492-REDOS" issueId="" issueLink="" name="An adversary may execute an attack on a program that uses a poor Regular Expression implementation by choosing input that results in an extreme situation for the Regex" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression (Regex) to enter these extreme situations and then hang for a very long time.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="50" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-122-PLUGIN-SYSTEM" issueId="" issueLink="" name="An adversary is able to exploit features of the plugin system that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An adversary takes advantage of a vulnerability in a plugin system to execute malicious code. Plugin systems are used in many software applications to extend functionality, and they typically allow third-party developers to create and add their own plugins to the system. However, if the plugin system is not designed or implemented securely, it can be vulnerable to attack.&lt;/p&gt;&lt;p&gt;An attacker can exploit a vulnerability in the plugin system to execute code that is not authorized by the application or the user. This can allow the attacker to steal sensitive information, modify or delete data, or take control of the targeted system. Plugin system attacks often involve the use of malicious plugins that are disguised as legitimate ones or are downloaded from untrusted sources.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="100" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="C-PLUGIN-PERMISSIONS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-PLUGIN-PERMISSIONS" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-242-CODE-INJECTION" issueId="" issueLink="" name="An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker exploits a vulnerability in input validation to inject malicious code into a system. This can allow the attacker to execute arbitrary commands, steal sensitive information, or take control of the targeted system. Code injection attacks can occur in a variety of contexts, such as web applications, operating systems, and mobile devices. The attack works by tricking the system into executing the injected code as if it were legitimate, often by exploiting weaknesses in programming languages or operating system features. Code injection attacks are a common and serious threat to the security of computer systems and proper input validation and sanitization techniques are essential to prevent them.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="100" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="C-PLUGIN-SANDBOX" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="C-HASHING-THECHNIQUES" mitigation="25"/>
                    <countermeasure ref="C-INTEGRITY-PLUGIN-CODE" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-94">
                  <countermeasures>
                    <countermeasure ref="C-PLUGIN-CODE-REVIEW" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HASHING-THECHNIQUES" mitigation="25"/>
                <countermeasure ref="C-INTEGRITY-PLUGIN-CODE" mitigation="25"/>
                <countermeasure ref="C-PLUGIN-CODE-REVIEW" mitigation="25"/>
                <countermeasure ref="C-PLUGIN-SANDBOX" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-37-PLUGIN-SYSTEM" issueId="" issueLink="" name="An attacker examines the plugin system to find sensitive data that has been embedded within it" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An adversary creates a plugin that appears to be legitimate but is actually designed to execute malicious code on the target system. The malicious plugin is then distributed to users or added to a repository, where it can be downloaded and installed by unsuspecting users.&lt;/p&gt;&lt;p&gt;Once the malicious plugin is installed, it can be used by the attacker to steal sensitive information, modify or delete data, or take control of the targeted system. The attacker may also use the malicious plugin to create a backdoor into the system, allowing them to access it in the future without detection.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="100" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="C-PLUGIN-DATA-ENCRYPTION" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-PLUGIN-DATA-ENCRYPTION" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="22184939-1022-4937-b93c-9d3f17f95974" diagramComponentId="d81094bf-004e-409a-903c-1bbe2bf1acc3" ref="4adfee7e-d7ce-45a0-b636-2144418646ca" name="Test SaaS Instance" desc="" library="" parentComponentRef="" componentDefinitionRef="test-saas-instance" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="11fa8d4e-f2a6-4544-bc33-34bae5f9c1d5" diagramComponentId="0d0cd0f7-c1d6-44d6-a0b1-e16a94fb5129" ref="2a1838e2-40cb-4717-abcf-ac72dbd4af81" name="Third Party" desc="" library="" parentComponentRef="" componentDefinitionRef="third-party" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="14adf5bf-57c8-40ad-88d7-92ef9106c65f" diagramComponentId="97c2ec3c-58a5-4e9e-8775-fbb24ed27c9c" ref="3aa06737-d494-4d96-97be-54e5275f348c" name="Third Party" desc="" library="" parentComponentRef="" componentDefinitionRef="third-party" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="0cc44d61-5186-4227-9ae3-1e4265fffb82" diagramComponentId="d0f9289f-4fe8-4b57-b206-4bbe38a30b2e" ref="2adde3de-4025-451a-b9d6-a6d85cc07480" name="User Profile" desc="" library="IR-Functional-Components" parentComponentRef="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" componentDefinitionRef="CD-USER-PROFILE" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Applications protecting sensitive or otherwise restricted resources must ensure that only appropriate and authorized users can access the application data. It is important that an application prevent unauthorized users gaining inappropriate access to each other's data. Although user A and user B may both be trusted to access data within the application, they may be only authorized to access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be able to access user B's personal data by manipulating a request (typical examples are the manipulation of an ID value or other object reference sent in the URL or body of an HTTP request).&lt;/p&gt;&lt;p&gt;It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames. The application must validate each request for protected data against the proven identity of the user. Before providing access to restricted resources the application must:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure the user has undergone appropriate authentication (identification and verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this with a password, token, or other verification. Typically this is done by checking the validity of the session token issued after login.&lt;/li&gt;&lt;li&gt;Confirm the user is authorized to access the data or resource they are requesting. E.g. their confirmed identify is checked against a server-side access control matrix to determine whether they may access the requested resource.&lt;/li&gt;&lt;li&gt;Access controls should be granular and make it possible to issue to individual resources to individual users or roles.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;URL and asset based access control is provided by most web-frameworks, and it is preferable to use an established and proven framework.&lt;/p&gt;&lt;p&gt;Object-level authorization checks should be considered in every function that accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor not using an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these tests.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA CM-07 Least Functionality" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/158-08_02_CM-07"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="5.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.18" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.2" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.3" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Using two different browsers configured with an intercepting proxy:&lt;/li&gt;&lt;li&gt;Login as user A in browser A.&lt;/li&gt;&lt;li&gt;Login as user B in browser B.&lt;/li&gt;&lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;ol&gt;&lt;li&gt;Perform the operation as user A and view their sensitive data.&lt;/li&gt;&lt;li&gt;Obtain the session ID of user B.&lt;/li&gt;&lt;li&gt;Configure the proxy to intercept.&lt;/li&gt;&lt;li&gt;Perform the operation as user A again, but this time intercept all the requests and replace user A's session ID with that of user B.&lt;/li&gt;&lt;li&gt;Ensure that user A's sensitive data is &lt;strong&gt;not &lt;/strong&gt;visible.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To ensure object-level authorization checks are in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.584">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-USER-INTERACTION-BASED-PROTECTION" name="Consider implementing user interaction based protection for highly sensitive operations" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implementing user interaction based protection is one of the principles that should be followed to defend against Cross-Site Request Forgery (CSRF). CSRF is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated.&lt;/p&gt;&lt;p&gt;While other techniques do not require any user interaction, sometimes it's easier or more appropriate to involve the user in the transaction to prevent unauthorized operations. The following are some examples of techniques that can act as strong CSRF defense when implemented correctly.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Authorization mechanism&lt;/li&gt;&lt;li&gt;One-time Token&lt;/li&gt;&lt;li&gt;CAPTCHA&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if the post requests are using CSRF token or captcha.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.884">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy instructs compliant browsers on how they may interact with external sites while in the current context. This enables the server to control interactive code and content from third parties, mitigating some client-side code injection attacks. The policy allows the server to specify what connections are permitted for each type of resource.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example, the following policy tells the browser to allow connections (including websockets) to the same domain to which the page was served: *.iriusrisk.com.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and set a Content-Security-Policy with least-privileges to allow only those interactions which are explicitly required.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header is returned, and if so, that it follows the security practice of least-privilege.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For more information on &lt;i&gt;Content-Security-Policy&lt;/i&gt; policy setup, see:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.203">
              <output/>
            </source>
            <references>
              <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" name="Do not use GET requests for state changing operations" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use GET requests to retrieve resource representation/information only - and not modify it in any way. As GET requests do not change the resource's state, these are said to be safe methods.&lt;/p&gt;&lt;p&gt;Additionally, GET APIs should be idempotent. Making multiple identical requests must produce the same result every time until another API (POST or PUT) has changed the state of the resource on the server.&lt;/p&gt;&lt;p&gt;If the Request-URI refers to a data-producing process, it is the produced data that shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTTP Methods" url="https://restfulapi.net/http-methods/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate all GET controller methods and ensure that they don't modify the state of the server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.883">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.&lt;/p&gt;&lt;p&gt;One of the ways to enforce this is by following the deny-by-default principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny-by-default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.584">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access control, authentication and authorization procedures should be centralized, and all roles, permissions, groups and users shall be controlled - or gain access - through this mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To ensure roles, groups and permissions are assigned properly to users, we need to have centralized access control, to grant or deny access easily and securely.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access control mechanisms are centralized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.583">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="FEAT-ACC-CTRL" name="Ensure that attribute or feature-based access control is used" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles.
&lt;br /&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.338">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.337">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.884">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser, etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.32" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If there is no company policy, check that at least the following data is included: timestamp event, status, error codes, service/command/application username or system account associated with an eventDevice used (e.g. source and destination IPs, terminal session ID, web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt; https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.583">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.884">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="excessive-permissions" name="Request only the minimum required permissions" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Security best practices dictate that the practice of least-privilege be followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission.
&lt;/div&gt;
&lt;div&gt;
  Review features and functionalities present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them along with associated OS permissions.
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that the application only requests the necessary permissions to work correctly.
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.338">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.338">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:40:58.338">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-103-CLICKJACKING" issueId="" issueLink="" name="An attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the top level page" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, imagine an attacker who builds a web site that has a button on it that says "click here for a free iPod". However, on top of that web page, the attacker has loaded an iframe with your mail account, and lined up exactly the "delete all messages" button directly on top of the "free iPod" button. The victim tries to click on the "free iPod" button but instead actually clicked on the invisible "delete all messages" button. In essence, the attacker has "hijacked" the user's click, hence the name "Clickjacking".&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="WEB-CSP" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-137-INJECTION" issueId="" issueLink="" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-180-BROKEN-ACCESS-CONTROL" issueId="" issueLink="" name="An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the application" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An Access Control functionality often spans many areas of software depending on the complexity of the access control system. For example, managing access control metadata or building caching for scalability purposes are often additional components in an access control system that need to be built or managed. Vulnerabilities appear when a user is able to successfully request access to something they usually shouldn't have access to. Oftentimes this is found when the authorization is not implemented properly. A typical example would be a certain endpoint on a website that throws a 403 forbidden error which is then bypassed by adding an X-Forwarded-For: "127.0.0.1" header.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1574.010" url="https://attack.mitre.org/techniques/T1574/010"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" mitigation="14"/>
                <countermeasure ref="CDS-USER-TRACK" mitigation="14"/>
                <countermeasure ref="CWE-285" mitigation="16"/>
                <countermeasure ref="FEAT-ACC-CTRL" mitigation="14"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="14"/>
                <countermeasure ref="deny-default-enf" mitigation="14"/>
                <countermeasure ref="excessive-permissions" mitigation="14"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-50-MALICIOUS-PROFILE-UPDATE" issueId="" issueLink="" name="An attacker can force users to update their profile without noticing it" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. This attack could allow an attacker to change one's account information (for example the "Name " or "Adress" attributes) without having to login to victim account or without having to login but only by using CSRF technique.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" mitigation="25"/>
                <countermeasure ref="C-USER-INTERACTION-BASED-PROTECTION" mitigation="25"/>
                <countermeasure ref="cwe-352-csrf" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="86de09a3-7a71-4637-862d-96a8330f751d" diagramComponentId="cd729537-41ce-470a-a346-55919012898b" ref="36dab866-da86-4541-b3ca-0ad936a27879" name="User Registration" desc="" library="IR-Functional-Components" parentComponentRef="dbf543f6-9213-4cb3-80f3-4a0452433923" componentDefinitionRef="CD-USER-REGISTRATION" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="CWE-654" name="Authenticate users (multi - or two-factor - authentication [2FA])" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi - or two-factor - authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt;&lt;li&gt;This should leverage something such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
          </references>
          <standards>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check for authentication functions of the component.&lt;/li&gt;&lt;li&gt;Verify at least a combination of the following factors is used within the authentication process.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Something that you are: mainly biometric characteristics of yourself such as fingerprint, facial recognition, iris recognition, etc.)&lt;/li&gt;&lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&lt;/li&gt;&lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:03.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-SAFE-PASSWORD-CONSIDERATIONS" name="Don't force password updates" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The new password may have been used elsewhere, and attackers can exploit this too. The new password is also more likely to be written down, which represents another vulnerability. New passwords are also more likely to be forgotten, and this carries the productivity costs of users being locked out of their accounts, and service desks having to reset passwords.&lt;/p&gt;&lt;p&gt;Notice here that this does not apply if a data leak has occurred and user credentials are exposed, in this case users should be notified and passwords forced to be changed.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security baseline (DRAFT) for Windows 10 v1903 and Windows Server v1903" url="https://docs.microsoft.com/en-us/archive/blogs/secguide/security-baseline-draft-for-windows-10-v1903-and-windows-server-v1903"/>
            <reference name="The problems with forcing regular password expiry" url="https://www.ncsc.gov.uk/blog-post/problems-forcing-regular-password-expiry"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check the company's password policy.&lt;/li&gt;&lt;li&gt;Check application configuration&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:03.675">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="C-VERIFY-ACCOUNTS-AFTER-REGISTRATION" name="Emails addresses that are used for account creation should be confirmed" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The most common way to determine whether the email address is correct and legitimate is to send an email to the user, and require that they click a link in the email, or enter a code that has been sent to them. This provides a basic level of assurance that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The email address is correct.&lt;/li&gt;&lt;li&gt;The application can successfully send emails to it.&lt;/li&gt;&lt;li&gt;The user has access to the mailbox.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The links that are sent to users to prove ownership should contain a token that is:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;At least 32 characters long.&lt;/li&gt;&lt;li&gt;Generated using a secure source of randomness.&lt;/li&gt;&lt;li&gt;Single use.&lt;/li&gt;&lt;li&gt;Time limited.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After validating the ownership of the email address, the user should then be required to authenticate on the application through the usual mechanism.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Input Validation Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Register in the application and check if the confirmation email arrives and account verification is required.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:03.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.&lt;/p&gt;&lt;p&gt;One of the ways to enforce this is by following the deny-by-default principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny-by-default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:03.676">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including the session id, software/framework versions and
                        personal information.</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application does not output error massages or stack traces containing sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.007">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.195">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.194">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:03.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:03.676">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="require-use-strong-passwords" name="Require the use of strong passwords" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords used either as a sole verification credentials, or as part of a multi-factor authentication, are a key aspect of application security, and strong password selection should be encouraged and enforced. The application should allow flexibility in user password selection, and enforce minimum criteria for password quality. This should include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimum password length requirements, to mitigate brute-force and dictionary attacks.&lt;/li&gt; 
 &lt;li&gt;Encourage use of pass-phrases using multiple words, achieving longer passwords more resistant to attack.&lt;/li&gt; 
 &lt;li&gt;Enforce use of mixed case, numeric and/or special characters to increase complexity.&lt;/li&gt; 
 &lt;li&gt;Prevent or discourage use of dictionary words and common passwords through black-lists. For example, a set of commonly used passwords can be found on SecLists at &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&amp;nbsp;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password length:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password length considers the minimum and maximum length of characters comprising the password of your users. For ease of changing this length, its implementation can be configurable possibly using a properties file or xml configuration file.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;Minimum length. &lt;/b&gt;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Memory secrets shall be at least 8 characters long. &lt;/li&gt; 
  &lt;li&gt;Memory secrets generated automatically shall be at least 6 numeric characters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Maximum length. &lt;/b&gt;People tend to forget their passwords easily. The longer the password, the more likely people are to enter them incorrectly for the system. However, long pass-phrases can be easily remembered, and should not be prevented through unnecessarily strict upper restrictions on length. &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords with 64 characters or longer shall be permitted.&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password Complexity:&lt;/span&gt;&lt;/p&gt;&lt;/b&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Passwords with consecutive multiple spaces shall be coalesced and converter into only one space. After this modification, the password length shall be at least 12 characters long.&lt;/li&gt; 
 &lt;li&gt;Unicode characters shall be allowed in the password. A single Unicode code point is considered a character.&lt;/li&gt; 
 &lt;li&gt;Reject those passwords whose are commonly used and they have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords: &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Actual passwords must not be stored, to protect them against brute forcing if the database is compromised Screen reader support enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password Topologies:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ban commonly used password topologies.&lt;/li&gt; 
 &lt;li&gt;Force multiple users to use different password topologies.&lt;/li&gt; 
 &lt;li&gt;Require a minimum topology change between old and new passwords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Additional Information:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).&lt;/li&gt; 
 &lt;li&gt;As application's require more complex password policies, they need to be very clear about what these policies are. The required policy needs to be explicitly stated on the password change page&lt;/li&gt; 
 &lt;li&gt;If the new password doesn't comply with the complexity policy, the error message should describe EVERY complexity rule that the new password does not comply with, not just the 1st rule it doesn't comply with.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Blacklist Top Leaked Passwords" url="https://github.com/danielmiessler/SecLists/tree/master/Passwords"/>
            <reference name="NIST 800-63-B: 5.1.2.2" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="Owasp CheatSheet: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="A.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt; 
 &lt;li&gt;Verify the passwords comply with the company policy for strong passwords.&lt;/li&gt; 
 &lt;li&gt;If there is no policy, check the strength against industry standards as NIST or OWASP.&lt;/li&gt; 
&lt;/ol&gt;An example of strong password policy (&amp;nbsp; 
&lt;a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"&gt;from the OWASP Authentication Cheat Sheet&lt;/a&gt;) is: Password must meet at least 3 out of the following 4 complexity rules: 
&lt;ul&gt; 
 &lt;li&gt;at least 1 uppercase character (A-Z)&lt;/li&gt; 
 &lt;li&gt;at least 1 lowercase character (a-z)&lt;/li&gt; 
 &lt;li&gt;at least 1 digit (0-9)&lt;/li&gt; 
 &lt;li&gt;at least 1 special character (punctuation). Do not forget to treat space as special characters too&lt;/li&gt; 
 &lt;li&gt;at least 10 characters&lt;/li&gt; 
 &lt;li&gt;at most 128 characters&lt;/li&gt; 
&lt;/ul&gt;not more than 2 identical characters in a row (e.g., 111 not allowed).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:03.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.195">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.195">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:41:04.195">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-210-SIGN-UP-ABUSE" issueId="" issueLink="" name="Attackers use bots to automate account creation, and sometimes profile population, by abusing the application's account sign-up processes" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Bulk account creation, and sometimes profile population, by using the application's account sign-up processes. The accounts are subsequently misused for generating content spam, laundering cash and goods, spreading malware, a ecting reputation, causing mischief, and skewing search engine optimisation (SEO), reviews and surveys.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-VERIFY-ACCOUNTS-AFTER-REGISTRATION" mitigation="25"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="25"/>
                <countermeasure ref="network-rate-limit" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-70-WEAK-PASSWORD" issueId="" issueLink="" name="A legitimate user sets a weak password in the sign up process putting their data at risk" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some web applications still allow passwords such as 111111 and abc123. These types of passwords typically result in weak and insecure passwords vulnerable to cracking. Weak passwords are a top contributor to security incidents and breaches.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-SAFE-PASSWORD-CONSIDERATIONS" mitigation="33"/>
                <countermeasure ref="CWE-654" mitigation="34"/>
                <countermeasure ref="require-use-strong-passwords" mitigation="33"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-575-ENUM-USERS" issueId="" issueLink="" name="Attackers can enumerate the existence of valid accounts in the system using error/informational messages" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If your login page has different error messages for unrecognized usernames and incorrect passwords, an attacker can write a script to submit lengthy lists of common usernames and test the response. With those results, the attacker can then infer which usernames are valid.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="security-logging" mitigation="33"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CAPEC-137-INJECTION" issueId="" issueLink="" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="6a9d0c91-9db4-451c-ac62-49055576b623" diagramComponentId="3bb7365b-d8b0-45a6-9fc9-224f5bc82cfb" ref="a2fd1f24-aca3-4db3-a43e-c199b6103331" name="Web UI" desc="" library="CS-Default" parentComponentRef="bdccf6e4-5ae5-4c8a-bb92-6307868b2b52" componentDefinitionRef="web-ui" generatedByRules="false" persistent="false">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="trusted-partner"/>
      </trustZones>
      <assets/>
      <settings>
        <issueTrackers>
          <jira>
            <fields/>
          </jira>
        </issueTrackers>
      </settings>
      <weaknesses>
        <weakness ref="CWE-830" name="Inclusion of Web Functionality from an Untrusted Source" state="0" impact="100" issueId="" issueLink="">
          <desc>The software includes web functionality (such as a web widget)
                        from another domain, which causes it to operate within the domain of the
                        software, potentially granting total access and control of the software to the
                        untrusted source.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:42:02.690">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:42:02.553">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="ASSETS-HOSTED-BY-APP" name="Ensure that all application assets are hosted by the application" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Review periodically all assets which are accessed by the application and ensure that these
                        assets are hosted by the application. If this is not the case and there are assets in external
                        providers or a CDN, you shall move these assets to be hosted by the application and remove them
                        from external providers or CDNs.
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-07 Software And Information Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/45-08_02_SI-07"/>
          </references>
          <standards>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all assets are hosted by the application, and not by external providers.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:42:02.650">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="33" state="Recommended" owner="jrabe@iriusrisk.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-05-07T22:42:02.478">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
          <settings>
            <issueTrackers>
              <jira>
                <fields/>
              </jira>
            </issueTrackers>
          </settings>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="general" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" issueId="" issueLink="" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1189" url="https://attack.mitre.org/techniques/T1189"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
            <threat ref="CWE-937-WEB" issueId="" issueLink="" name="Attackers gain unauthorised access to data by compromising third party web resources" state="Expose" source="RULES" edited="false" owner="jrabe@iriusrisk.com" library="CS-Default" editable="true">
              <desc>Web applications typically make extensive use of 3rd party web resources such as
                                JavaScript and CSS files.&amp;nbsp; Should attackers gain access to the source code
                                repositories, or even Content Delivery Networks that host these libraries, then they
                                could gain access to applications that use this content.
                                &lt;div&gt;
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-830">
                  <countermeasures>
                    <countermeasure ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
              </countermeasures>
              <customFields/>
              <settings>
                <issueTrackers>
                  <jira>
                    <fields/>
                  </jira>
                </issueTrackers>
              </settings>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
  <threadFixScans/>
</project>
